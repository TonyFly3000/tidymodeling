---
title: "map"
subtitle: "with leaflet"
author: "Tony Duan"

execute:
  warning: false
  error: false

format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
    code-copy: true
---

# data


```{r}
library(tidyverse)


library(leaflet)
library(geojsonio)
library(leaflet.extras)
```
# display at openstreet map

```{r}

m <- leaflet() %>%
   # Add default OpenStreetMap map tiles
  addTiles() %>%  
  # add markers
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")

m  
```



# display at google map

```{r}
leaflet() |>
  # add base mao
  addTiles(urlTemplate = "https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}") |>
  # set view
  setView(116.347817690225, 39.997202126977, zoom = 16) |>
  # add markers
  addMarkers(116.347817690225, 39.997202126977)
```
# Third-Party map

```{r}
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 10)

m %>% addProviderTiles(providers$Stadia.StamenToner)
```


# add pop up

Popups are small boxes containing arbitrary HTML, that point to a specific point on the map.

```{r}

content <- paste(sep = "<br/>",
  "<b><a href='https://www.samurainoodle.com/'>Samurai Noodle</a></b>",
  "606 5th Ave. S",
  "Seattle, WA 98138"
)

leaflet() %>% addTiles() %>%
  setView(-122.327298, 47.597131,zoom = 12) %>% 
  addPopups(-122.327298, 47.597131, content,
    #options = popupOptions(closeButton = FALSE)
    options = popupOptions(closeButton = FALSE)
  )
```




# add Markers

```{r}
library(htmltools)

df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"
))

leaflet(df) %>% addTiles() %>%
  addMarkers(~Long, ~Lat, popup = ~htmlEscape(Name))
```

# add Labels
A label is a textual or HTML content that can attached to markers and shapes to be always displayed or displayed on mouse over. Unlike popups you don’t need to click a marker/polygon for the label to be shown.

```{r}
library(htmltools)

df <- read.csv(textConnection(
"Name,Lat,Long
Samurai Noodle,47.597131,-122.327298
Kukai Ramen,47.6154,-122.327157
Tsukushinbo,47.59987,-122.326726"))

leaflet(df) %>% addTiles() %>%
  addMarkers(~Long, ~Lat, label = ~htmlEscape(Name))
```



# US map

## data source 

```{r}
states <- geojsonio::geojson_read("https://rstudio.github.io/leaflet/json/us-states.geojson", what = "sp")
```

```{r}
class(states)
```

```{r}

names(states)
```


# China one city map

```{r}
json_data <- sf::read_sf("./GeoMapData_CN/citys/440300.json") 
```

深圳市：
```{r}
pal <- colorNumeric("viridis", NULL)

leaflet(json_data) %>%
  addTiles() %>%
  addPolygons(smoothFactor = 0.3, fillOpacity = 0.1)

```




# China one province map

```{r}
json_data <- sf::read_sf("./GeoMapData_CN/province/440000.json") 
```


广东省 2021 人均gpd usd：

```{r}
library(openxlsx)
library(readxl)
per_gdp_usd=read_excel('guangdong city gdp2021.xlsx')
```

```{r}
map_df <- as.data.frame(json_data)
```

```{r}
map_df002 <- merge(map_df, per_gdp_usd, by.x = "name", by.y = "city")
```

```{r}
map_sf002 <- sf::st_as_sf(map_df002, sf_column_name = "geometry")
```


data source:广东统计年鉴2022
```{r}
pal <- colorNumeric("viridis", NULL)

leaflet(map_sf002) %>%
  addTiles() %>%
  addPolygons(smoothFactor = 0.3, fillOpacity = 0.5,weight = 1,
    fillColor = ~ pal(per_gpd_usd)
    ,popup = ~ paste0(
      "城市：", name, "<br/>",
      "<hr/>",
      "人均gpd：", per_gpd_usd, "（美万）", "<br/>"
      
    )
     ,label = lapply(paste0(
      "城市：", "<b>", map_sf002$name, "</b>", "<br/>",
      "人均gpd 美元：", map_sf002$per_gpd_usd, "<br/>",
      "人均gpd 人民币：", map_sf002$per_gpd_rmb, "<br/>",
       "人口：", round(map_sf002$total_gpd_rmb*10000000/map_sf002$per_gpd_rmb), "<br/>"
    ), htmltools::HTML)
    )%>% addLegend(
    position = "bottomright", title = "人均gpd(美元)",
    pal = pal, values = ~per_gpd_usd, opacity = 1.0
    )
  
  

```

https://zh.wikipedia.org/wiki/%E5%B9%BF%E4%B8%9C%E5%90%84%E5%9C%B0%E7%BA%A7%E5%B8%82%E5%9C%B0%E5%8C%BA%E7%94%9F%E4%BA%A7%E6%80%BB%E5%80%BC%E5%88%97%E8%A1%A8

# China province  map


```{r}
library(leaflet)
library(sf)

json_data <- sf::read_sf("./GeoMapData_CN/china.json") 


pal <- colorNumeric("viridis", NULL)

leaflet(json_data) %>%
  addTiles() %>%
  addPolygons(smoothFactor = 0.3, fillOpacity = 0.1)

```

# China province and city map


```{r}
map_list <- lapply(
  X = list.files("./GeoMapData_CN/province", recursive = T, full.names = T),
  FUN = sf::read_sf
)

length(map_list)

```


```{r}


for (i in c(1:length(map_list))){
   #print(i)
  #print(dim(map_list[[i]]))
  #print(ncol(map_list[[i]]))
  if(ncol(map_list[[i]])!=10){print(map_list[[i]])}
  }
```



```{r}

X = list.files("./GeoMapData_CN/province", recursive = T, full.names = T)

X2=X[-which(X %in% c("./GeoMapData_CN/province/710000.json"
         ))]

map_list <- lapply(
  X = X2,
  FUN = sf::read_sf
)
```


```{r}
length(map_list)
```

```{r}
province_map <- Reduce("rbind", map_list)
```


```{r}
library(leaflet)
library(sf)

json_data <- province_map


pal <- colorNumeric(c("red", "green", "blue"), 1:10)

leaflet(json_data) %>%
  addTiles() %>%
  addPolygons(smoothFactor = 0.3, fillOpacity = 0.1)

```



# China city and district  map


```{r}
map_list <- lapply(
  X = list.files("./GeoMapData_CN/citys", recursive = T, full.names = T),
  FUN = sf::read_sf
)

length(map_list)

```


```{r}


for (i in c(1:length(map_list))){
   #print(i)
  #print(dim(map_list[[i]]))
  #print(ncol(map_list[[i]]))
  if(ncol(map_list[[i]])!=10){print(map_list[[i]])}
  }
```



```{r}

X = list.files("./GeoMapData_CN/citys", recursive = T, full.names = T)

X2=X[-which(X %in% c("./GeoMapData_CN/citys/620200.json"
         ,"./GeoMapData_CN/citys/460400.json"
              ,"./GeoMapData_CN/citys/442100.json"
              ,"./GeoMapData_CN/citys/442000.json"
              ,"./GeoMapData_CN/citys/441900.json"
         ))]

map_list <- lapply(
  X = X2,
  FUN = sf::read_sf
)
```



```{r}
length(map_list)
```

```{r}
province_map <- Reduce("rbind", map_list)
```




```{r}
library(leaflet)
library(sf)

json_data <- province_map


pal <- colorNumeric(c("red", "green", "blue"), 1:10)

leaflet(json_data) %>%
  addTiles() %>%
  addPolygons(smoothFactor = 0.3, fillOpacity = 0.1)

```








# show all map
```{r, attr.output='.details summary="providers"'}
providers
```

```{r, attr.output='.details summary="sessionInfo()"'}
sessionInfo()
```


# resouce:


https://rstudio.github.io/leaflet/

https://github.com/Lchiffon/leafletCN

https://github.com/longwosion/geojson-map-china

https://xiangyun.rbind.io/2022/02/draw-china-maps/


https://datav.aliyun.com/portal/school/atlas/area_selector
