---
title: "Basic R"
author: "Tony Duan"

execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---

![](images/R_logo.svg.png){width="300"}

# work with file

## get current directory

```{r}
#| eval: false
getwd()
```

## get all file name under current directory

```{r}
list.files()
```

## get all file name under currrents parent directory

```{r}
list.files("../")
```


## get file info

```{r}
#| eval: false
file.info("6 data analytic in R book.qmd")
```

## create folder

```{r}
#| eval: false
dir.create('testing_folder')
```

## delete folder/file

```{r}
#| eval: false
file.remove('testing_folder')
```

## copy file

```{r}
#| eval: false
library(fs)
file_copy('test.csv', 'test2.csv')
```

## download file from internet

```{r}
#| eval: false
url="https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv"

download.file(url = url, destfile = "hotels.csv")
```


## download table from internet

```{r}
library(tidyverse)
library(rvest)
library(janitor)

nba_wiki_url='https://en.wikipedia.org/wiki/List_of_NBA_champions'
  
nba_wiki_data001=nba_wiki_url %>% read_html() %>% html_table()

nba_wiki_data002=nba_wiki_data001[[2]] %>% clean_names()

nba_wiki_data003=nba_wiki_data002 %>%filter(!row_number() %in% c(1, 5)) %>% mutate(year=str_sub(year, 1, 4))

tail(nba_wiki_data003)

```

# handle error

using tryCatch to continues the code chunk.

```{r}
tryCatch({
  1+who
},error=function(e){
  message(paste0('Here is some error:',e))
})

print('end of the code chunk')
```



# Condition with if/elif/else

```{r}
x <- -5
if(x > 10){
print("Non-negative number and better than 10")
} else if (x > 0) {
  print("Non-negative number and better than 0")
} else {
print("Negative number")
}
```



# Loop

## for Loop

```{r}
for (x in 1:4) {
  print(x)
}
```


with break statement

```{r}
for (x in 1:6) {
  if (x == 4) {break}
  print(x)
}
```
with next statement

```{r}
for (x in 1:6) {
  if (x == 4) {next}
  print(x)
}
```

## Error handling on for Loop:print out error

```{r}
stuff <- list(12, 9, 2, "cat", 25, 10, "bird")
#stuff
```


```{r}
loop_num=0

for (i in 1:6) {
  loop_num=loop_num+1
  tryCatch (print(1+i),
           
           error = function(e){
           message(paste("An error occurred for loop num", loop_num,":\n"), e)
             
         })
}
```




## while Loop

```{r}
i <- 1
while (i < 6) {
  print(i)
  i <- i + 1
}
```

with break statement

```{r}
i <- 1
while (i < 6) {
  print(i)
  i <- i + 1
  if (i == 4) {break}
}
```

with next statement

```{r}
i =1

while (i < 6) {
  i <- i + 1
  if (i == 4){next}
  print(i)
}
```



## Error handling on whie Loop: try when the error gone

```{r}
i=0
a=0
while (i < 4) {
  a=a+1
  print(i)
  tryCatch({
  asdfgaergae5gh5hae5h
    i=i+1
  },error = function(msg){print('eeeeeeee')
    i=i-1
    print(paste0("new i : ",i))
   
    })
   if(a>10){break}
  }
```




# function

## without Arguments

```{r}
my_function <- function() { 
  print("Hello World!")
}

my_function()
```

## with Arguments

```{r}
adding_ten <- function(x) { 
  a=x+10
  return(a)
}

adding_ten(5)
```

## with default Arguments

```{r}
adding_ten <- function(x=10) { 
  a=x+10
  return(a)
}

#if not define x, then x=10

adding_ten()
```

## check function Arguments

```{r}
args(adding_ten)
```

Many functions exhibit variadic behavior. That is, they can accept any num- ber of arguments, and it’s up to the user to decide how many arguments to provide. The functions c, data.frame, and list are all like this. When you call a function like data.frame, you can specify any number of members as arguments.

```{r}
args(data.frame)
```

## warning in function

print out warning

```{r}
adding_ten <- function(x=10) { 
  a=x+10
  if(a>50){
    warning('its better than 50')
  }
  return(a)
}
```

```{r}
adding_ten(100)
```

## stop in function

print out stop error message

```{r}
#| eval: false
adding_ten <- function(x=10) { 
  a=x+10
  if(a>50){
    stop('its better than 50')
  }
  return(a)
}
```

```{r}
#| eval: false
adding_ten(100)
```

## use try to by pass error

```{r}
try(adding_ten(100))
5+10
```

# program running time

```{r}
start_time=Sys.time()

v=matrix(1:100000000)
c=v*v

end_time=Sys.time()
```

```{r}
start_time
```

```{r}
end_time
```

```{r}
end_time-start_time
```

# Package

## check R version

```{r}
version
```

## install R package

### install from Cran

99% of the time will install pacakge from The Comprehensive R Archive Network(cran).<https://cran.r-project.org/>

![](images/1_wcX2tfGe4til0PmjxhKuQA.png){width="300"}

```{r}
#| eval: false
install.packages('tidyverse')
```

### install from Github

```{r}
#| eval: false
pak::pkg_install("tidymodels/learntidymodels")
```

### install from .tar.gz

```{r}
#| eval: false
install.packages("https://cran.r-project.org/src/contrib/Archive/maptools/maptools_1.1-8.tar.gz")
```

### install from Bioconductor

```{r}
#| eval: false
pak::pkg_install("text2vec")
```

### install from local

```{r}
#| eval: false
pak::local_install("cli")
```

## check one package version

```{r}
packageVersion("tidyverse")
```

## check pacakge relationship

```{r}
pak::pkg_deps_explain("tibble", "rlang")
```

## check pacakge dependencies

```{r}
pak::pkg_deps_tree("tibble")
```

## check current loaded package

```{r}
sessionInfo()
```

## check all package version

```{r}
ip = as.data.frame(installed.packages()[,c(1,3:4)])
ip = ip[is.na(ip$Priority),1:2,drop=FALSE]
head(ip)
```

## check package install loaciton

```{r}
.libPaths()
```

## uninstall pacakge

```{r}
#| eval: false
remove.packages('xxxxx')
```

# sleep

The time interval to suspend execution for, in seconds.

```{r}
Sys.sleep(3)
```

# open two R session on Mac

```{r filename="Terminal"}
#| eval: false
open -n /Applications/RStudio.app
```


# Statistics



## Centrality: Mean, Median, Mode

## Spread: Variance, Standard Deviation, and the Interquartile Range

## Covariance and Correlation

When analyzing data, it’s often useful to be able to investigate the rela- tionship between two numeric variables to assess trends. For example, you might expect height and weight observations to have a noticeable positive relationship—taller people tend to weigh more. Conversely, you might imag- ine that handspan and length of hair would have less of an association. One of the simplest and most common ways such associations are quantified and compared is through the idea of correlation, for which you need the covariance. The covariance expresses how much two numeric variables “change together” and the nature of that relationship,

![](images/clipboard-4055345945.png)

## Correlation,Pearson’s product-moment correlation coefficient

Pearson’s sample correlation coef- ficient ρxy is computed by dividing the sample covariance by the product of the standard deviation of each data set

![](images/clipboard-1822919442.png)

Some Correlation Example:

![](images/clipboard-775702636.png)



```{r, attr.output='.details summary="sessionInfo()"'}
sessionInfo()
```


