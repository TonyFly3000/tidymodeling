---
title: "Level 1 Regression Tidy Modeling"
subtitle: "with house price data"
execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---


# load package

```{r}
#| code-summary: "Load Pacakges & Set Options"
library(themis)
library(tidyverse)      
library(tidymodels)     
library(palmerpenguins) # penguin dataset
library(gt)             # better tables
library(bonsai)         # tree-based models
library(conflicted)     # function conflicts
library(vetiver)
library(Microsoft365R)
library(pins)
tidymodels_prefer()     # handle conflicts
conflict_prefer("penguins", "palmerpenguins")
options(tidymodels.dark = TRUE) # dark mode
theme_set(theme_bw()) # set default ggplot2 theme
```

# data preparation

## read data

```{r}
library(tidyverse)
train = read_csv("data/train.csv")

test=read_csv("data/test.csv")

```



## data split

```{r}
#| code-summary: "Prepare & Split Data"
train_df <- train  %>% select_if(is.numeric)%>% rename(target_variable=SalePrice)%>% replace(is.na(.), 0)


```



```{r}

set.seed(1234)

data_split <- initial_validation_split(data=train_df, prop = c(0.7,0.1))

data_train=training(data_split)  

data_test=testing(data_split)  

data_valid=validation(data_split)

```

```{r}
dim(data_train)
```

```{r}
dim(data_test)
```

```{r}
dim(data_valid)
```


# modeling

## recipe

did not use recipe at this case



## model

### linear regression using OLS

```{r}
lm_spec <- linear_reg() %>%
  set_engine(engine = "lm")

lm_spec
```
### lasso regression 

```{r}
lasso_spec <- linear_reg(penalty = 0.1, mixture = 1) %>%
  set_engine("glmnet")
```



### Random Forest Model
```{r}
rf_spec <- rand_forest(mode = "regression") %>%
  set_engine("ranger")

rf_spec
``` 



## trainning

### train lm model
```{r}
lm_fit <- lm_spec %>%
  fit(target_variable ~ ., data = data_train)

lm_fit
```

```{r}
lm_fit %>% tidy()

```

### train lm model
```{r}
lasso_fit <- lasso_spec %>%
  fit(target_variable ~ ., data = data_train)

lasso_fit
```



```{r}
lasso_fit %>% tidy()
```



### train random forest model
```{r}
rf_fit <- rf_spec %>%
  fit(target_variable ~ ., data = data_train)

rf_fit
```



# model result

## Evaluate

```{r}
results_train <- lm_fit %>%
  predict(new_data = data_train) %>%
  mutate(
    truth = data_train$target_variable,
    model = "lm"
  ) %>%
  bind_rows(rf_fit %>%
    predict(new_data = data_train) %>%
    mutate(
      truth = data_train$target_variable,
      model = "rf"
    )) %>%
  bind_rows(lasso_fit %>%
    predict(new_data = data_train) %>%
    mutate(
      truth = data_train$target_variable,
      model = "lasso"
    ))


results_test <- lm_fit %>%
  predict(new_data = data_test) %>%
  mutate(
    truth = data_test$target_variable,
    model = "lm"
  ) %>%
  bind_rows(rf_fit %>%
    predict(new_data = data_test) %>%
    mutate(
      truth = data_test$target_variable,
      model = "rf"
    ))%>%
  bind_rows(lasso_fit %>%
    predict(new_data = data_test) %>%
    mutate(
      truth = data_test$target_variable,
      model = "lasso"
    ))

```


```{r}
results_train %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)
```



```{r}
results_test %>%
  group_by(model) %>%
  rmse(truth = truth, estimate = .pred)
```




```{r}
results_test %>%
  mutate(train = "testing") %>%
  bind_rows(results_train %>%
    mutate(train = "training")) %>%
  ggplot(aes(truth, .pred, color = model)) +
  geom_abline(lty = 2, color = "gray80", size = 1.5) +
  geom_point(alpha = 0.5) +
  facet_wrap(~train) +
  labs(
    x = "Truth",
    y = "Predicted attendance",
    color = "Type of model"
  )
```





## resample with rf model
```{r}
set.seed(1234)
folds <- vfold_cv(data_train)
```



```{r}

rf_res <- lm_spec %>% fit_resamples(
  target_variable ~ .,
  folds,
  control = control_resamples(save_pred = TRUE)
)
```

```{r}

rf_res %>%
  collect_metrics()
```







# resouece

https://www.youtube.com/watch?v=1LEW8APSOJo



