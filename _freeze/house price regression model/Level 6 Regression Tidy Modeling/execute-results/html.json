{
  "hash": "9c4ca845ad29689359bbad2e11750da9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Level 6 Regression Tidy Modeling\"\nsubtitle: \"with house price data\"\nauthor: \"Tony Duan\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n* using Recipe.\n* add resamples to estimate the performance of our two models\n* add workflow with tunning\n* add quick tuning\n* add workflow set and setting different tuning grid for different model\n\n# load package\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load Pacakges & Set Options\"}\nlibrary(themis)\nlibrary(tidyverse)      \nlibrary(tidymodels)     \nlibrary(palmerpenguins) # penguin dataset\nlibrary(gt)             # better tables\nlibrary(bonsai)         # tree-based models\nlibrary(conflicted)     # function conflicts\nlibrary(vetiver)\nlibrary(Microsoft365R)\nlibrary(pins)\ntidymodels_prefer()     # handle conflicts\nconflict_prefer(\"penguins\", \"palmerpenguins\")\noptions(tidymodels.dark = TRUE) # dark mode\ntheme_set(theme_bw()) # set default ggplot2 theme\n```\n:::\n\n\n# data preparation\n\n## read data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ntrain = read_csv(\"data/train.csv\")\n\ntest=read_csv(\"data/test.csv\")\n```\n:::\n\n\n## data split\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Prepare & Split Data\"}\ntrain_df <- train  %>% select_if(is.numeric)%>% rename(target_variable=SalePrice)%>% replace(is.na(.), 0)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndata_split <- initial_validation_split(data=train_df, prop = c(0.7,0.1))\n\ndata_train=training(data_split)  \n\ndata_test=testing(data_split)  \n\ndata_valid=validation(data_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1021   38\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 293  38\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_valid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 146  38\n```\n\n\n:::\n:::\n\n\n# modeling\n\n## recipe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_rec <- recipe(target_variable ~ ., data = data_train) %>%\n  #step_downsample(target_variable) %>%\n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  step_zv(all_numeric()) %>%\n  step_normalize(all_numeric(), -all_outcomes())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrained_data_rec <- prep(data_rec, training = data_train)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrained_data_rec %>%check_missing(\"LotFrontage\")\n```\n:::\n\n\n\n## model\n\n![](images/1.png){width=\"214\"}\n\n### lasso regression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_tune_spec <- linear_reg(penalty = tune(), mixture = 1) %>%\n  set_engine(\"glmnet\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_grid <- grid_regular(penalty(), levels = 50)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlasso_tune_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nLinear Regression Model Specification (regression)\n\nMain Arguments:\n  penalty = tune()\n  mixture = 1\n\nComputational engine: glmnet \n```\n\n\n:::\n:::\n\n\n\n\n### decision tree model with cost_complexity and tree_depth to tune\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_spec =\n  decision_tree(\n    cost_complexity = tune(),\n    tree_depth = tune()\n  ) %>% \n  set_engine(\"rpart\") %>% \n  set_mode(\"regression\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_spec %>% extract_parameter_set_dials()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCollection of 2 parameters for tuning\n\n      identifier            type    object\n cost_complexity cost_complexity nparam[+]\n      tree_depth      tree_depth nparam[+]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree_tune_grid = \n  tune_spec |> \n  extract_parameter_set_dials() |> \n  grid_latin_hypercube(size = 100)\n```\n:::\n\n\n\n### lightGBM Boost tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlightgbm_spec = boost_tree(\n  trees = 100,\n  tree_depth = tune(), min_n = tune(),\n  loss_reduction = tune(),                     ## first three: model complexity\n  sample_size = tune(),   mtry=tune(),     ## randomness\n  learn_rate = tune()                          ## step size\n) %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(\"regression\")\n\nlightgbm_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBoosted Tree Model Specification (regression)\n\nMain Arguments:\n  mtry = tune()\n  trees = 100\n  min_n = tune()\n  tree_depth = tune()\n  learn_rate = tune()\n  loss_reduction = tune()\n  sample_size = tune()\n\nComputational engine: lightgbm \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlightgbm_grid= grid_latin_hypercube(\n  tree_depth(),learn_rate(),loss_reduction(),min_n(),\n  sample_size=sample_prop(),finalize(mtry(),data_train),\n  size=50)\n\nhead(lightgbm_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  tree_depth    learn_rate loss_reduction min_n sample_size  mtry\n       <int>         <dbl>          <dbl> <int>       <dbl> <int>\n1          7 0.00953             2.79e- 1    40       0.256    13\n2          6 0.00130             1.47e- 3    16       0.732     4\n3          9 0.0000453           2.17e- 7    36       0.446    25\n4          3 0.0199              2.13e- 8    26       0.773    35\n5         13 0.0793              8.96e- 9    30       0.219    12\n6         10 0.00000000238       1.09e-10    21       0.699    21\n```\n\n\n:::\n:::\n\n\n### Random Forest Model\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_spec <- rand_forest(\n  mtry = tune(), trees = tune(), min_n = tune()\n  )%>%\n  set_engine(\"ranger\") %>%\n  set_mode(\"regression\")\n\nrf_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRandom Forest Model Specification (regression)\n\nMain Arguments:\n  mtry = tune()\n  trees = tune()\n  min_n = tune()\n\nComputational engine: ranger \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf_grid <- \n  grid_latin_hypercube(\n    min_n(), \n    mtry(range = c(4, 9)), \n    trees(), \n    size = 80)\n\nhead(rf_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 3\n  min_n  mtry trees\n  <int> <int> <int>\n1    33     7  1713\n2    29     5  1343\n3    12     6   545\n4    21     6   843\n5    27     5  1485\n6    13     9    48\n```\n\n\n:::\n:::\n\n\n\n## workflow\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow_set =\n  workflow_set(\n    preproc = list(data_rec),\n    models = list(\n                  lasso=lasso_tune_spec,\n                  tree  = tune_spec,\n                  lightgbm=lightgbm_spec,\n                  random_forest=rf_spec\n                  )\n  ) %>% option_add(grid = decision_tree_tune_grid, id = \"recipe_tree\")  %>% \n  option_add(grid = lasso_grid, id = \"recipe_lasso\")  %>% \n  option_add(grid = lightgbm_grid, id = \"recipe_lightgbm\")  %>% \n  option_add(grid = rf_grid, id = \"recipe_rf\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow_set %>%\n  option_add_parameters()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 4 × 4\n  wflow_id             info             option    result    \n  <chr>                <list>           <list>    <list>    \n1 recipe_lasso         <tibble [1 × 4]> <opts[2]> <list [0]>\n2 recipe_tree          <tibble [1 × 4]> <opts[2]> <list [0]>\n3 recipe_lightgbm      <tibble [1 × 4]> <opts[2]> <list [0]>\n4 recipe_random_forest <tibble [1 × 4]> <opts[1]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\nusing control_race instead of control_grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(finetune)\ncntl   <- control_race(save_pred     = TRUE,\n                       save_workflow = TRUE)\n```\n:::\n\n\n10 fold for tunning\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(234)\nfolds <- vfold_cv(data_train)\n```\n:::\n\n\n## training\n\n### train lasso model\n\nusing tune_race_anova() instead of tune_grid()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(finetune)\ndoParallel::registerDoParallel()\n\nmodel_set_res = workflow_set  %>% \n  workflow_map(\n              grid = 50,\n               resamples = folds,\n               control = cntl\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_results(model_set_res,\n             rank_metric = \"rmse\",\n             select_best = TRUE)  %>% \n  gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"lpajcbdcmt\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#lpajcbdcmt table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#lpajcbdcmt thead, #lpajcbdcmt tbody, #lpajcbdcmt tfoot, #lpajcbdcmt tr, #lpajcbdcmt td, #lpajcbdcmt th {\n  border-style: none;\n}\n\n#lpajcbdcmt p {\n  margin: 0;\n  padding: 0;\n}\n\n#lpajcbdcmt .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#lpajcbdcmt .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#lpajcbdcmt .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#lpajcbdcmt .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#lpajcbdcmt .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#lpajcbdcmt .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#lpajcbdcmt .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#lpajcbdcmt .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#lpajcbdcmt .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#lpajcbdcmt .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#lpajcbdcmt .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#lpajcbdcmt .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#lpajcbdcmt .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#lpajcbdcmt .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#lpajcbdcmt .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lpajcbdcmt .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#lpajcbdcmt .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#lpajcbdcmt .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#lpajcbdcmt .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lpajcbdcmt .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#lpajcbdcmt .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lpajcbdcmt .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#lpajcbdcmt .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lpajcbdcmt .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#lpajcbdcmt .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#lpajcbdcmt .gt_left {\n  text-align: left;\n}\n\n#lpajcbdcmt .gt_center {\n  text-align: center;\n}\n\n#lpajcbdcmt .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#lpajcbdcmt .gt_font_normal {\n  font-weight: normal;\n}\n\n#lpajcbdcmt .gt_font_bold {\n  font-weight: bold;\n}\n\n#lpajcbdcmt .gt_font_italic {\n  font-style: italic;\n}\n\n#lpajcbdcmt .gt_super {\n  font-size: 65%;\n}\n\n#lpajcbdcmt .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#lpajcbdcmt .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#lpajcbdcmt .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#lpajcbdcmt .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#lpajcbdcmt .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#lpajcbdcmt .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#lpajcbdcmt .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"wflow_id\">wflow_id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".config\">.config</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".metric\">.metric</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean\">mean</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"std_err\">std_err</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">n</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"preprocessor\">preprocessor</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"rank\">rank</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lightgbm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model46</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rmse</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">2.898681e+04</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">3.152131e+03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lightgbm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model46</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rsq</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">8.704013e-01</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">1.884946e-02</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_random_forest</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model31</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rmse</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">2.918897e+04</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">3.074054e+03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">rand_forest</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_random_forest</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model31</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rsq</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">8.693925e-01</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">1.953458e-02</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">rand_forest</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lasso</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model01</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rmse</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">3.878538e+04</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">5.169415e+03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">linear_reg</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lasso</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model01</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rsq</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">7.769664e-01</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">4.331088e-02</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">linear_reg</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_tree</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model06</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rmse</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">3.923049e+04</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">2.064970e+03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">decision_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_tree</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model06</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">rsq</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">7.674437e-01</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">1.574068e-02</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">decision_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">4</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_set_res |> autoplot()\n```\n\n::: {.cell-output-display}\n![](Level-6-Regression-Tidy-Modeling_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_set_res |> autoplot( id= 'recipe_lightgbm')\n```\n\n::: {.cell-output-display}\n![](Level-6-Regression-Tidy-Modeling_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\nselect best model:logistic glm model \n\n::: {.cell}\n\n```{.r .cell-code}\nbest_model_id <- \"recipe_random_forest\"\n```\n:::\n\n\n\nselect best parameters\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_fit <-\n  model_set_res |>\n  extract_workflow_set_result(best_model_id) |>\n  select_best(metric = \"rmse\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create workflow for best model\nfinal_workflow <-\n  model_set_res |>\n  extract_workflow(best_model_id) |>\n  finalize_workflow(best_fit)\n```\n:::\n\n\n\n\n\n# model result\n\n\n\n## last fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <-\n  final_workflow |>\n  last_fit(data_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(scipen=10000)\nfinal_fit %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  .metric .estimator .estimate .config             \n  <chr>   <chr>          <dbl> <chr>               \n1 rmse    standard   28019.    Preprocessor1_Model1\n2 rsq     standard       0.876 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(final_fit%>%collect_predictions()) %>% ggplot(aes(target_variable, .pred))+ geom_abline(lty = 2, color = \"gray80\", size = 1.5) +geom_point(alpha = 0.5)+labs(\n    x = \"Truth\",\n    y = \"Predicted attendance\",\n    color = \"Type of model\"\n  )+scale_x_continuous(labels = scales::comma) +scale_y_continuous(labels = scales::comma) \n```\n\n::: {.cell-output-display}\n![](Level-6-Regression-Tidy-Modeling_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\nmanual calculate RMSE on testing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_data=final_fit%>%collect_predictions()\n\nfinal_data2=final_data %>% mutate(diff=target_variable-.pred)%>% mutate(diff2=diff^2)\n\na=sum(final_data2$diff2)/nrow(final_data2)\n\nsqrt(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28018.9\n```\n\n\n:::\n\n```{.r .cell-code}\n#glimpse(final_data2)\n```\n:::\n\n\n\n\n\n\n# future prediction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfuture_predict=predict(final_fit %>% extract_workflow(),data_valid)\n\nglimpse(future_predict)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 146\nColumns: 1\n$ .pred <dbl> 275453.9, 150846.5, 306571.1, 305832.6, 127243.9, 288534.0, 2525…\n```\n\n\n:::\n:::\n\n\n\n# resouece\n\nhttps://www.youtube.com/watch?v=1LEW8APSOJo\n\nhttps://juliasilge.com/blog/lasso-the-office/\n",
    "supporting": [
      "Level-6-Regression-Tidy-Modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}