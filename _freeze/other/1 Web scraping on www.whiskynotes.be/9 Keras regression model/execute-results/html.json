{
  "hash": "bd3c0aaa6f48eadf864fb9834388475c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Keras regression model\"\nsubtitle: \"with whiskynote.be data\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n::: {#a846c8b6 .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nfrom siuba.siu import call\nfrom siuba import _, mutate, filter, group_by, summarize,show_query\nfrom siuba import *\n\nfrom siuba.data import mtcars,penguins\n```\n:::\n\n\n# read in data\n\n::: {#fb09c077 .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndata=pd.read_excel('./output/all_page_bottle_list_all.xlsx')\n```\n:::\n\n\n::: {#0ffa84af .cell execution_count=3}\n``` {.python .cell-code}\nlist(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['bottle_name',\n 'bottle_review_Nose',\n 'bottle_review_Mouth',\n 'bottle_review_Finish',\n 'all_page_score',\n 'page_class',\n 'page_published_date',\n 'page_title',\n 'review_url']\n```\n:::\n:::\n\n\n::: {#75435504 .cell execution_count=4}\n``` {.python .cell-code}\ndata.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4934 entries, 0 to 4933\nData columns (total 9 columns):\n #   Column                Non-Null Count  Dtype \n---  ------                --------------  ----- \n 0   bottle_name           4934 non-null   object\n 1   bottle_review_Nose    4934 non-null   object\n 2   bottle_review_Mouth   4934 non-null   object\n 3   bottle_review_Finish  4934 non-null   object\n 4   all_page_score        4934 non-null   int64 \n 5   page_class            4934 non-null   object\n 6   page_published_date   4934 non-null   object\n 7   page_title            4934 non-null   object\n 8   review_url            4934 non-null   object\ndtypes: int64(1), object(8)\nmemory usage: 347.1+ KB\n```\n:::\n:::\n\n\n::: {#d50e23db .cell execution_count=5}\n``` {.python .cell-code}\nimport re\ndata001=data>> filter(_.all_page_score >=70\n                      ,_.all_page_score <100\n                      ,_.bottle_review_Nose !='no comment'\n                      ,_.bottle_review_Mouth !='no comment'\n                      ,_.bottle_review_Finish !='no comment'\n                      ) >>mutate(\n                      review=_.bottle_name+_.bottle_review_Nose+_.bottle_review_Mouth+_.bottle_review_Finish\n                      )>>mutate(review=_.review.str.lower().str.replace('nose:','').str.replace('mouth:','').str.replace('finish:','').str.replace('.','').str.replace(',','').str.replace('(','').str.replace(')','').str.replace('-','').str.replace('apples','apple').str.replace('oranges','orange').str.replace('sweetness','sweet').str.replace('fruits','fruit'))>>mutate(review_len=_.review.str.count(' ') + 1)\n\n```\n:::\n\n\n::: {#671ad1e2 .cell execution_count=6}\n``` {.python .cell-code}\ndata001['review_flag']= np.where(data001['all_page_score']>=90, 1, 0)\n```\n:::\n\n\n# shuffle data\n\n::: {#77ee0ddc .cell execution_count=7}\n``` {.python .cell-code}\ndata002=data001.sample(frac=1)\n```\n:::\n\n\n::: {#60eb09db .cell execution_count=8}\n``` {.python .cell-code}\ndata002.to_excel('data002.xlsx')\n```\n:::\n\n\n::: {#b856b18c .cell execution_count=9}\n``` {.python .cell-code}\ndata002.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4633 entries, 1482 to 2810\nData columns (total 12 columns):\n #   Column                Non-Null Count  Dtype \n---  ------                --------------  ----- \n 0   bottle_name           4633 non-null   object\n 1   bottle_review_Nose    4633 non-null   object\n 2   bottle_review_Mouth   4633 non-null   object\n 3   bottle_review_Finish  4633 non-null   object\n 4   all_page_score        4633 non-null   int64 \n 5   page_class            4633 non-null   object\n 6   page_published_date   4633 non-null   object\n 7   page_title            4633 non-null   object\n 8   review_url            4633 non-null   object\n 9   review                4633 non-null   object\n 10  review_len            4633 non-null   int64 \n 11  review_flag           4633 non-null   int64 \ndtypes: int64(3), object(9)\nmemory usage: 470.5+ KB\n```\n:::\n:::\n\n\n::: {#0c4c5577 .cell execution_count=10}\n``` {.python .cell-code}\nreview=data002['review'].tolist()\n```\n:::\n\n\n::: {#2c99c034 .cell execution_count=11}\n``` {.python .cell-code}\nreview[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n'glen keith 21 yo 1992\\n482% the whisky fair 2014 bourbon barrel 201 btl slightly warmer more honeyed and beehivey with less of the dried grasses as if a little caperdonich 72 was added to the daily dram hints of tropical fruit and vanilla traces of strawberries and mirabelles nicer but maybe a bit simpler shopping in the fruit department banana juicy pear tangerines papaya slightly irish actually vanilla marshmallows melon candy light ginger and pepper from the oak great surprise utterly fruit quite long still very fruity en seductive with a hint of drying oak'\n```\n:::\n:::\n\n\n::: {#46fc533e .cell execution_count=12}\n``` {.python .cell-code}\nreview_flag=data002[\"review_flag\"].tolist()\n```\n:::\n\n\n::: {#89cc4db2 .cell execution_count=13}\n``` {.python .cell-code}\nreview_score=data002[\"all_page_score\"].tolist()\n```\n:::\n\n\n::: {#f5892cbd .cell execution_count=14}\n``` {.python .cell-code}\nreview_flag[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n0\n```\n:::\n:::\n\n\n::: {#e71c3d85 .cell execution_count=15}\n``` {.python .cell-code}\nfrom collections import Counter\nCounter(review_flag)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nCounter({0: 3402, 1: 1231})\n```\n:::\n:::\n\n\n::: {#c121a1a5 .cell execution_count=16}\n``` {.python .cell-code}\nprint(len(review))\n\nprint(len(review_flag))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4633\n4633\n```\n:::\n:::\n\n\n# transfer data\n\n::: {#557a7917 .cell execution_count=17}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n```\n:::\n\n\n::: {#5b567615 .cell execution_count=18}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(review)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n```\n:::\n\n\n::: {#fdf45a0d .cell execution_count=19}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 12598\n```\n:::\n:::\n\n\n::: {#57edc814 .cell execution_count=20}\n``` {.python .cell-code}\n# Convert labels lists to numpy array\nreview_flag_final = np.array(review_flag)\nreview_score_final = np.array(review_score)\n```\n:::\n\n\n::: {#8f0a2236 .cell execution_count=21}\n``` {.python .cell-code}\n# Parameters\nvocab_size = 7000\nmax_length = 300\nembedding_dim = 16\n#trunc_type='pre'\ntrunc_type='post'\noov_tok = \"<OOV>\"\n```\n:::\n\n\n::: {#81abf3d6 .cell execution_count=22}\n``` {.python .cell-code}\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Initialize the Tokenizer class\ntokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n\n# Generate the word index dictionary for the training sentences\ntokenizer.fit_on_texts(review)\nword_index = tokenizer.word_index\n\n# Generate and pad the training sequences\nsequences = tokenizer.texts_to_sequences(review)\npadded = pad_sequences(sequences,maxlen=max_length, truncating=trunc_type)\n```\n:::\n\n\n::: {#a175abb4 .cell execution_count=23}\n``` {.python .cell-code}\nlen(review[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\n667\n```\n:::\n:::\n\n\n::: {#32638159 .cell execution_count=24}\n``` {.python .cell-code}\nlen(padded[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n300\n```\n:::\n:::\n\n\n::: {#390d0f0c .cell execution_count=25}\n``` {.python .cell-code}\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])            \n\ndef decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n```\n:::\n\n\n::: {#be213b66 .cell execution_count=26}\n``` {.python .cell-code}\nprint(decode_review(padded[4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? glenrothes 19 yo 1997 537 claxton’s 2016 sherry butt 7154 669 btl a sherry bomb alright including a sulphury taint mulch in my garden some meaty notes that aside dark chocolate truckloads of dark plums and figs sticky toffee pudding tobacco gingerbread it resembles some of the thickest glendronach releases it does get a tad brighter after a while orange peel again deeply sherried px style treacle chocolate truffles liquorice and preserved cherries plenty of oak spices ginger among others hints of cough syrup tobacco coffee powder still a bit of gunpowder and beef stock very long and mostly dry leathery but with a dark raisin undertone and a pinch of salt\n```\n:::\n:::\n\n\nafter tokenizer\n\n::: {#de2802c7 .cell execution_count=27}\n``` {.python .cell-code}\nprint(sequences[4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[689, 713, 18, 541, 1451, 2200, 305, 39, 224, 6583, 4449, 20, 4, 39, 892, 1301, 450, 4, 1016, 5211, 4450, 14, 400, 796, 9, 412, 7, 74, 2722, 89, 43, 1169, 3, 89, 113, 2, 255, 910, 90, 1146, 57, 431, 24, 3597, 9, 3, 6, 5212, 668, 858, 24, 1039, 323, 4, 359, 536, 111, 4, 158, 26, 182, 33, 1081, 435, 574, 245, 974, 43, 2276, 55, 2, 1482, 253, 78, 3, 19, 71, 45, 2596, 726, 8, 3, 488, 149, 57, 135, 551, 50, 4, 86, 3, 1112, 2, 1755, 2201, 22, 17, 2, 397, 103, 196, 12, 5, 4, 89, 911, 951, 2, 4, 788, 3, 270]\n```\n:::\n:::\n\n\n::: {#87d14a15 .cell execution_count=28}\n``` {.python .cell-code}\nreview_flag[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n0\n```\n:::\n:::\n\n\n# using 4000 to train and 633 to test\n\n::: {#0c1770f9 .cell execution_count=29}\n``` {.python .cell-code}\npadded_train=padded[0:4000]\npadded_test=padded[4000:]\n```\n:::\n\n\n::: {#75d1da52 .cell execution_count=30}\n``` {.python .cell-code}\nreview_flag_final_train=review_flag_final[0:4000]\nreview_flag_final_test=review_flag_final[4000:]\n```\n:::\n\n\n::: {#161ae274 .cell execution_count=31}\n``` {.python .cell-code}\nreview_socre_final_train=review_score_final[0:4000]\nreview_socre_final_test=review_score_final[4000:]\n```\n:::\n\n\n## total\n\n::: {#3788b3bf .cell execution_count=32}\n``` {.python .cell-code}\nlen(padded)\nlen(review_flag_final)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n4633\n```\n:::\n:::\n\n\n## train\n\n::: {#12a07243 .cell execution_count=33}\n``` {.python .cell-code}\nlen(padded_train)\nlen(review_flag_final_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\n4000\n```\n:::\n:::\n\n\n## test\n\n::: {#601aafce .cell execution_count=34}\n``` {.python .cell-code}\nlen(padded_test)\nlen(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\n633\n```\n:::\n:::\n\n\n::: {#ebe017f9 .cell execution_count=35}\n``` {.python .cell-code}\nsum(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\n158\n```\n:::\n:::\n\n\n## if all guess lower than 90 points then 0.72 accuracy \n\n::: {#20d8493f .cell execution_count=36}\n``` {.python .cell-code}\n(len(review_flag_final_test)-sum(review_flag_final_test))/len(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\n0.7503949447077409\n```\n:::\n:::\n\n\n# dummy model\n\ntrainning score average is 86.5\n\n::: {#eb2f0b22 .cell execution_count=37}\n``` {.python .cell-code}\nsum(review_socre_final_train)/len(review_socre_final_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\n86.59675\n```\n:::\n:::\n\n\n::: {#ee40e3e1 .cell execution_count=38}\n``` {.python .cell-code}\nimport numpy as np\nsum(np.absolute(86.5-review_socre_final_test))/len(review_socre_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n3.2567140600315954\n```\n:::\n:::\n\n\n# DNN regression model \n\n::: {#6498cbb1 .cell execution_count=39}\n``` {.python .cell-code}\n# Build the model\nmodel_dnn= tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size,output_dim=32),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n```\n:::\n\n\n::: {#dbe4ddd0 .cell execution_count=40}\n``` {.python .cell-code}\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.Adam(0.001)\n\n# Set the training parameters\nmodel_dnn.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=[\"mae\"])\n```\n:::\n\n\n::: {#eb224080 .cell execution_count=41}\n``` {.python .cell-code}\nmodel_dnn.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling1d        │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#d953dce7 .cell execution_count=42}\n``` {.python .cell-code}\n# Train the model\nhistory = model_dnn.fit(x=padded_train, y=review_socre_final_train,validation_data=(padded_test, review_socre_final_test),epochs=200,verbose=0 )\n\n#history = model_dnn.fit(x=padded_train, y=review_socre_final_train,validation_split=0.2,epochs=20)\n```\n:::\n\n\n::: {#da12426e .cell execution_count=43}\n``` {.python .cell-code}\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nmae = history.history['mae']\nval_mae = history.history['val_mae']\n\nepochs = range(len(val_loss))\n```\n:::\n\n\n::: {#76dacefc .cell execution_count=44}\n``` {.python .cell-code}\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('DNN model Training and validation loss')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-45-output-1.png){width=566 height=431}\n:::\n:::\n\n\n::: {#0ccc9c14 .cell execution_count=45}\n``` {.python .cell-code}\n# import matplotlib.image as mpimg\n# import matplotlib.pyplot as plt\n# #------------------------------------------------\n# # Plot training and validation loss per epoch\n# #------------------------------------------------\n# \n# plt.plot(epochs, mae, 'r', label='Training mae')\n# plt.plot(epochs, val_mae, 'b', label='Validation mae')\n# plt.title('DNN model Training and validation mae')\n# plt.legend()\n# \n# plt.show()\n```\n:::\n\n\n::: {#f63560eb .cell execution_count=46}\n``` {.python .cell-code}\n# Only plot the last 80% of the epochs\nzoom_split = int(epochs[-1] * 0.2)\nepochs_zoom = epochs[zoom_split:]\nval_loss_zoom = val_loss[zoom_split:]\nloss_zoom = loss[zoom_split:]\n\n# Plot zoomed mae and loss\nplt.plot(epochs_zoom, loss_zoom, 'r', label='Training Loss')\nplt.plot(epochs_zoom, val_loss_zoom, 'b', label='Validation Loss')\nplt.title('DNN model Training and validation loss')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-47-output-1.png){width=571 height=431}\n:::\n:::\n\n\n## predication\n\n::: {#96d9968a .cell execution_count=47}\n``` {.python .cell-code}\nx = padded_test\ny = model_dnn.predict(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r 1/20 ━━━━━━━━━━━━━━━━━━━━ 0s 27ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r20/20 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step \n```\n:::\n:::\n\n\n::: {#0c16e78e .cell execution_count=48}\n``` {.python .cell-code}\nlen(padded_test)\nlen(y)\nlen(review_socre_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```\n633\n```\n:::\n:::\n\n\n::: {#e41dbb71 .cell execution_count=49}\n``` {.python .cell-code}\nreview_socre_final_test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```\n(633,)\n```\n:::\n:::\n\n\n::: {#70170835 .cell execution_count=50}\n``` {.python .cell-code}\ny.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```\n(633, 1)\n```\n:::\n:::\n\n\n::: {#c9458ceb .cell execution_count=51}\n``` {.python .cell-code}\ny2 = y.flatten()\n```\n:::\n\n\n::: {#894f3bc8 .cell execution_count=52}\n``` {.python .cell-code}\ny2.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```\n(633,)\n```\n:::\n:::\n\n\n::: {#12a2200c .cell execution_count=53}\n``` {.python .cell-code}\ndataset = pd.DataFrame({'real': review_socre_final_test, 'predic': list(y2)}, columns=['real', 'predic'])\n```\n:::\n\n\n::: {#a528dcab .cell execution_count=54}\n``` {.python .cell-code}\ndataset['predic']=round(dataset['predic'])\ndataset['predic']=round(dataset['predic'])\n```\n:::\n\n\n::: {#7d38f615 .cell execution_count=55}\n``` {.python .cell-code}\ndataset=dataset>> mutate(predic=if_else(_.predic <70, 70, _.predic)\n                          ,dummy_pred=86\n                         ,diff=_.predic-_.real \n                         ,dummy_diff=_.dummy_pred-_.real\n                          )>> mutate(predic=if_else(_.predic >100,100, _.predic)\n                                     ,predic_class=if_else(_.predic >=90,1, 0)\n                                    ,real_class=if_else(_.real>=90,1, 0)\n                                    ,dummy_class=0\n                          )\n                          \ndataset002 = pd.concat([data002[4000:].reset_index(drop=True),dataset.reset_index(drop=True)], axis=1)                    \n```\n:::\n\n\n::: {#a3fee160 .cell execution_count=56}\n``` {.python .cell-code}\ndataset002.to_excel('pred.xlsx')\n```\n:::\n\n\n# mean absolute error \n\n::: {#5971d682 .cell execution_count=57}\n``` {.python .cell-code}\nsum(abs(dataset002['diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```\n2.0205371248025275\n```\n:::\n:::\n\n\n::: {#57ea8a81 .cell execution_count=58}\n``` {.python .cell-code}\nsum(abs(dataset002['dummy_diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```\n3.323854660347551\n```\n:::\n:::\n\n\n::: {#b113f60b .cell execution_count=59}\n``` {.python .cell-code}\nsum(dataset002['predic']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```\n157\n```\n:::\n:::\n\n\n::: {#46e6fff0 .cell execution_count=60}\n``` {.python .cell-code}\nsum(dataset002['real']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\n158\n```\n:::\n:::\n\n\n::: {#b15a6f89 .cell execution_count=61}\n``` {.python .cell-code}\nfrom sklearn import metrics\nconfusion_matrix_dt = metrics.confusion_matrix(dataset002['real_class'],dataset002['predic_class']) \nconfusion_matrix_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\narray([[424,  51],\n       [ 52, 106]])\n```\n:::\n:::\n\n\n::: {#17a2e72e .cell execution_count=62}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['predic_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\n0.8372827804107424\n```\n:::\n:::\n\n\n::: {#9eeafd51 .cell execution_count=63}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['dummy_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\n0.7503949447077409\n```\n:::\n:::\n\n\n::: {#701c3dd8 .cell execution_count=64}\n``` {.python .cell-code}\nimport seaborn as sns\nfig, ax = plt.subplots()\n\nsns.scatterplot(data=dataset,x='real',y='predic',ax=ax)\nsns.regplot(data=dataset, x=\"real\", y=\"predic\", x_jitter=.15,ax=ax)\nax.set(xlim=(65, 100),ylim=(65, 100))\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-65-output-1.png){width=606 height=434}\n:::\n:::\n\n\n# save model\n\n::: {#bfd429cf .cell execution_count=65}\n``` {.python .cell-code}\n#model_dnn.save('whiskynote_score_dnn.keras')\n```\n:::\n\n\n## load model\n\n::: {#79569d97 .cell execution_count=66}\n``` {.python .cell-code}\nnew_model = tf.keras.models.load_model('whiskynote_score_dnn.keras')\n```\n:::\n\n\n::: {#3ef965d2 .cell execution_count=67}\n``` {.python .cell-code}\nnew_model.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │       <span style=\"color: #00af00; text-decoration-color: #00af00\">224,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling1d_2      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,056</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │           <span style=\"color: #00af00; text-decoration-color: #00af00\">792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │           <span style=\"color: #00af00; text-decoration-color: #00af00\">600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                │            <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">679,421</span> (2.59 MB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">226,473</span> (884.66 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">452,948</span> (1.73 MB)\n</pre>\n```\n:::\n:::\n\n\n# new data\n\n::: {#b0b71d28 .cell execution_count=68}\n``` {.python .cell-code}\nimport tensorflow as tf\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nfrom siuba.siu import call\nfrom siuba import _, mutate, filter, group_by, summarize,show_query\nfrom siuba import *\n\nfrom siuba.data import mtcars,penguins\n```\n:::\n\n\n# read in data\n\n::: {#e24d5a34 .cell execution_count=69}\n``` {.python .cell-code}\nimport pandas as pd\nnew_data=pd.read_excel('./output/all_page_bottle_list_all_new.xlsx')\n```\n:::\n\n\n::: {#ce984a46 .cell execution_count=70}\n``` {.python .cell-code}\nimport re\nnew_data001=new_data>> filter(_.all_page_score >=70\n                      ,_.all_page_score <100\n                      ,_.bottle_review_Nose !='no comment'\n                      ,_.bottle_review_Mouth !='no comment'\n                      ,_.bottle_review_Finish !='no comment'\n                      ) >>mutate(\n                      review=_.bottle_name+_.bottle_review_Nose+_.bottle_review_Mouth+_.bottle_review_Finish\n                      )>>mutate(review=_.review.str.lower().str.replace('nose:','').str.replace('mouth:','').str.replace('finish:','').str.replace('.','').str.replace(',','').str.replace('(','').str.replace(')','').str.replace('-','').str.replace('apples','apple').str.replace('oranges','orange').str.replace('sweetness','sweet').str.replace('fruits','fruit'))>>mutate(review_len=_.review.str.count(' ') + 1)\n\n```\n:::\n\n\n::: {#01f83e54 .cell execution_count=71}\n``` {.python .cell-code}\nnew_data001['review_flag']= np.where(new_data001['all_page_score']>=90, 1, 0)\n```\n:::\n\n\n# shuffle data\n\n::: {#8d3f2115 .cell execution_count=72}\n``` {.python .cell-code}\nnew_data001=new_data001.sample(frac=1).head(100)\n```\n:::\n\n\n::: {#38029010 .cell execution_count=73}\n``` {.python .cell-code}\nnew_review=new_data001['review'].tolist()\n```\n:::\n\n\n::: {#a37c297a .cell execution_count=74}\n``` {.python .cell-code}\nnew_review[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=74}\n```\n'longrow red 15 yo – pinot noir cask matured 514% ob 2022 9400 btl a rather mellow start bramble jam stands out against a background of smouldering barbecue smoke a lot of tobacco leaves and old fabrics smoked ham even a little manure and hints of a musty wine cellar there’s also a brighter side of red apple and redcurrants it’s mature with a slightly subdued profile but showing nice aromas and no offnotes either sulphury or winey for me a lot of smoke and wet earthy notes come out at first quickly followed by winey notes definitely more wine influence than i expected from the nose toffee and strawberries then astringent notes start to take over like burnt mediterranean herbs and a trace of leafy bitterness more cranberries now hints of saline soy sauce and smoke as it fades long smoky and sweet with red fruit and salinity'\n```\n:::\n:::\n\n\n::: {#9e60ac80 .cell execution_count=75}\n``` {.python .cell-code}\nnew_review_flag=new_data001[\"review_flag\"].tolist()\n```\n:::\n\n\n::: {#2369b2e3 .cell execution_count=76}\n``` {.python .cell-code}\nnew_review_score=new_data001[\"all_page_score\"].tolist()\n```\n:::\n\n\n::: {#3362b606 .cell execution_count=77}\n``` {.python .cell-code}\nnew_review_flag[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=77}\n```\n0\n```\n:::\n:::\n\n\n::: {#4148fb0b .cell execution_count=78}\n``` {.python .cell-code}\nfrom collections import Counter\nCounter(new_review_flag)\n```\n\n::: {.cell-output .cell-output-display execution_count=78}\n```\nCounter({0: 79, 1: 21})\n```\n:::\n:::\n\n\n::: {#8360fac2 .cell execution_count=79}\n``` {.python .cell-code}\nprint(len(new_review))\n\nprint(len(new_review_flag))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n100\n100\n```\n:::\n:::\n\n\n# transfer data\n\n::: {#d427fb19 .cell execution_count=80}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n```\n:::\n\n\n::: {#b84b4348 .cell execution_count=81}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\n# ! using model training ord index dictionary\ntokenizer.fit_on_texts(review)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n```\n:::\n\n\n::: {#4c1d30d3 .cell execution_count=82}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 12598\n```\n:::\n:::\n\n\n::: {#3a708868 .cell execution_count=83}\n``` {.python .cell-code}\n# Convert labels lists to numpy array\nnew_review_flag_final = np.array(new_review_flag)\nnew_review_score_final = np.array(new_review_score)\n```\n:::\n\n\n::: {#664ff1bf .cell execution_count=84}\n``` {.python .cell-code}\n# Parameters\nvocab_size = 7000\nmax_length = 300\nembedding_dim = 16\n#trunc_type='pre'\ntrunc_type='post'\noov_tok = \"<OOV>\"\n```\n:::\n\n\n::: {#cb462ee3 .cell execution_count=85}\n``` {.python .cell-code}\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Initialize the Tokenizer class\ntokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n\n# Generate the word index dictionary for the training sentences\n# ! using model training ord index dictionary\ntokenizer.fit_on_texts(review)\nword_index = tokenizer.word_index\n\n# Generate and pad the training sequences \n#! on new data\nnew_sequences = tokenizer.texts_to_sequences(new_review)\nnew_padded = pad_sequences(new_sequences,maxlen=max_length, truncating=trunc_type)\n```\n:::\n\n\n::: {#22c3b2f3 .cell execution_count=86}\n``` {.python .cell-code}\nlen(new_review[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=86}\n```\n459\n```\n:::\n:::\n\n\n::: {#26110c9a .cell execution_count=87}\n``` {.python .cell-code}\nlen(new_padded[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=87}\n```\n300\n```\n:::\n:::\n\n\n::: {#9e13e56f .cell execution_count=88}\n``` {.python .cell-code}\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])            \n\ndef decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n```\n:::\n\n\n::: {#2ab90a18 .cell execution_count=89}\n``` {.python .cell-code}\nprint(decode_review(new_padded[4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? redbreast 15 yo 46 ob 2005 very crisp grapefruit with sweeter notes of peach and honey fresh and playful whiffs of cut grass vanilla and a pinch of cinnamon coconut and pineapple papaya a slight waxiness very irish gentle and accessible again very much on grapefruit growing spicier with hints of caramel some banana and citrus a bit floral as well not the most complex but certainly very <OOV> medium length delicate fruit with vanilla and hints of cocoa\n```\n:::\n:::\n\n\nafter tokenizer\n\n::: {#6f086904 .cell execution_count=90}\n``` {.python .cell-code}\nprint(new_sequences[4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[2214, 424, 18, 195, 42, 791, 22, 1177, 63, 5, 243, 7, 3, 294, 2, 38, 65, 2, 2598, 179, 3, 774, 388, 21, 2, 4, 788, 3, 64, 168, 2, 77, 421, 4, 337, 916, 22, 515, 217, 2, 1460, 33, 22, 187, 25, 63, 364, 800, 5, 8, 3, 112, 9, 101, 2, 69, 4, 86, 95, 10, 15, 47, 6, 447, 250, 12, 518, 22, 1, 56, 254, 527, 16, 5, 21, 2, 8, 3, 230]\n```\n:::\n:::\n\n\n::: {#9b729600 .cell execution_count=91}\n``` {.python .cell-code}\nnew_review_flag[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=91}\n```\n0\n```\n:::\n:::\n\n\n# predication\n\n::: {#1f306c41 .cell execution_count=92}\n``` {.python .cell-code}\nx = new_padded\ny = new_model.predict(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/4 ━━━━━━━━━━━━━━━━━━━━ 0s 25ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r4/4 ━━━━━━━━━━━━━━━━━━━━ 0s 6ms/step \n```\n:::\n:::\n\n\n::: {#31091ea3 .cell execution_count=93}\n``` {.python .cell-code}\nlen(x)\nlen(y)\n```\n\n::: {.cell-output .cell-output-display execution_count=93}\n```\n100\n```\n:::\n:::\n\n\n::: {#ea1b2053 .cell execution_count=94}\n``` {.python .cell-code}\ny2 = y.flatten()\n```\n:::\n\n\n::: {#51672328 .cell execution_count=95}\n``` {.python .cell-code}\ny2.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=95}\n```\n(100,)\n```\n:::\n:::\n\n\n::: {#b27481ab .cell execution_count=96}\n``` {.python .cell-code}\ndataset = pd.DataFrame({'real': new_review_score_final, 'predic': list(y2)}, columns=['real', 'predic'])\n```\n:::\n\n\n::: {#1e627e48 .cell execution_count=97}\n``` {.python .cell-code}\ndataset['predic']=round(dataset['predic'])\ndataset['predic']=round(dataset['predic'])\n```\n:::\n\n\n::: {#0765bbe4 .cell execution_count=98}\n``` {.python .cell-code}\ndataset=dataset>> mutate(predic=if_else(_.predic <70, 70, _.predic)\n                          ,dummy_pred=86\n                         ,diff=_.predic-_.real \n                         ,dummy_diff=_.dummy_pred-_.real\n                          )>> mutate(predic=if_else(_.predic >100,100, _.predic)\n                                     ,predic_class=if_else(_.predic >=90,1, 0)\n                                    ,real_class=if_else(_.real>=90,1, 0)\n                                    ,dummy_class=0\n                          )\n                          \ndataset002 = pd.concat([data002.head(100).reset_index(drop=True),dataset.reset_index(drop=True)], axis=1)                    \n```\n:::\n\n\n# mean absolute error \n\n::: {#3257a97f .cell execution_count=99}\n``` {.python .cell-code}\nsum(abs(dataset002['diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=99}\n```\n2.26\n```\n:::\n:::\n\n\n::: {#f98e9c5a .cell execution_count=100}\n``` {.python .cell-code}\nsum(abs(dataset002['dummy_diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=100}\n```\n2.9\n```\n:::\n:::\n\n\n::: {#c1462a80 .cell execution_count=101}\n``` {.python .cell-code}\nsum(dataset002['predic']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=101}\n```\n11\n```\n:::\n:::\n\n\n::: {#84263d81 .cell execution_count=102}\n``` {.python .cell-code}\nsum(dataset002['real']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=102}\n```\n21\n```\n:::\n:::\n\n\n::: {#d31c6956 .cell execution_count=103}\n``` {.python .cell-code}\nfrom sklearn import metrics\nconfusion_matrix_dt = metrics.confusion_matrix(dataset002['real_class'],dataset002['predic_class']) \nconfusion_matrix_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=103}\n```\narray([[75,  4],\n       [14,  7]])\n```\n:::\n:::\n\n\n::: {#dd2edfed .cell execution_count=104}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['predic_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=104}\n```\n0.82\n```\n:::\n:::\n\n\n::: {#b931c7c7 .cell execution_count=105}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['dummy_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=105}\n```\n0.79\n```\n:::\n:::\n\n\n::: {#5d715a92 .cell execution_count=106}\n``` {.python .cell-code}\nimport seaborn as sns\nfig, ax = plt.subplots()\n\nsns.scatterplot(data=dataset,x='real',y='predic',ax=ax)\nsns.regplot(data=dataset, x=\"real\", y=\"predic\", x_jitter=.15,ax=ax)\nax.set(xlim=(65, 100),ylim=(65, 100))\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-107-output-1.png){width=606 height=434}\n:::\n:::\n\n\n# resource:\n\nhttps://www.tensorflow.org/tutorials/keras/regression\n\n",
    "supporting": [
      "9 Keras regression model_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}