{
  "hash": "d583ccdfaff7f80d2b0c2a1eacf47698",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Keras regression model\"\nsubtitle: \"with whiskynote.be data\"\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\n\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n::: {#d88705df .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow as tf\n\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pylab as plt\nimport seaborn as sns\n\nfrom siuba.siu import call\nfrom siuba import _, mutate, filter, group_by, summarize,show_query\nfrom siuba import *\n\nfrom siuba.data import mtcars,penguins\n```\n:::\n\n\n# read in data\n\n::: {#4b1bab1c .cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndata=pd.read_excel('./output/all_page_bottle_list_all.xlsx')\n```\n:::\n\n\n::: {#0b561ab2 .cell execution_count=3}\n``` {.python .cell-code}\nlist(data)\n```\n\n::: {.cell-output .cell-output-display execution_count=134}\n```\n['bottle_name',\n 'bottle_review_Nose',\n 'bottle_review_Mouth',\n 'bottle_review_Finish',\n 'all_page_score',\n 'page_class',\n 'page_published_date',\n 'page_title',\n 'review_url']\n```\n:::\n:::\n\n\n::: {#74a67f7d .cell execution_count=4}\n``` {.python .cell-code}\ndata.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 4934 entries, 0 to 4933\nData columns (total 9 columns):\n #   Column                Non-Null Count  Dtype \n---  ------                --------------  ----- \n 0   bottle_name           4934 non-null   object\n 1   bottle_review_Nose    4934 non-null   object\n 2   bottle_review_Mouth   4934 non-null   object\n 3   bottle_review_Finish  4934 non-null   object\n 4   all_page_score        4934 non-null   int64 \n 5   page_class            4934 non-null   object\n 6   page_published_date   4934 non-null   object\n 7   page_title            4934 non-null   object\n 8   review_url            4934 non-null   object\ndtypes: int64(1), object(8)\nmemory usage: 347.1+ KB\n```\n:::\n:::\n\n\n::: {#8eaba7da .cell execution_count=5}\n``` {.python .cell-code}\nimport re\ndata001=data>> filter(_.all_page_score >=70\n                      ,_.all_page_score <100\n                      ,_.bottle_review_Nose !='no comment'\n                      ,_.bottle_review_Mouth !='no comment'\n                      ,_.bottle_review_Finish !='no comment'\n                      ) >>mutate(\n                      review=_.bottle_name+_.bottle_review_Nose+_.bottle_review_Mouth+_.bottle_review_Finish\n                      )>>mutate(review=_.review.str.lower().str.replace('nose:','').str.replace('mouth:','').str.replace('finish:','').str.replace('.','').str.replace(',','').str.replace('(','').str.replace(')','').str.replace('-','').str.replace('apples','apple').str.replace('oranges','orange').str.replace('sweetness','sweet').str.replace('fruits','fruit'))>>mutate(review_len=_.review.str.count(' ') + 1)\n\n```\n:::\n\n\n::: {#f633a09c .cell execution_count=6}\n``` {.python .cell-code}\ndata001['review_flag']= np.where(data001['all_page_score']>=90, 1, 0)\n```\n:::\n\n\n# shuffle data\n\n::: {#913b4f85 .cell execution_count=7}\n``` {.python .cell-code}\ndata002=data001.sample(frac=1)\n```\n:::\n\n\n::: {#0b70a297 .cell execution_count=8}\n``` {.python .cell-code}\ndata002.to_excel('data002.xlsx')\n```\n:::\n\n\n::: {#fc6858d5 .cell execution_count=9}\n``` {.python .cell-code}\ndata002.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 4633 entries, 2214 to 1334\nData columns (total 12 columns):\n #   Column                Non-Null Count  Dtype \n---  ------                --------------  ----- \n 0   bottle_name           4633 non-null   object\n 1   bottle_review_Nose    4633 non-null   object\n 2   bottle_review_Mouth   4633 non-null   object\n 3   bottle_review_Finish  4633 non-null   object\n 4   all_page_score        4633 non-null   int64 \n 5   page_class            4633 non-null   object\n 6   page_published_date   4633 non-null   object\n 7   page_title            4633 non-null   object\n 8   review_url            4633 non-null   object\n 9   review                4633 non-null   object\n 10  review_len            4633 non-null   int64 \n 11  review_flag           4633 non-null   int64 \ndtypes: int64(3), object(9)\nmemory usage: 470.5+ KB\n```\n:::\n:::\n\n\n::: {#b54d3770 .cell execution_count=10}\n``` {.python .cell-code}\nreview=data002['review'].tolist()\n```\n:::\n\n\n::: {#b30f2d33 .cell execution_count=11}\n``` {.python .cell-code}\nreview[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=142}\n```\n'glen garioch 21 yo 1992 516% liquid library 2014 refill hogshead 227 btl again a rounder version with tangerines lemon liqueur and honey light vanilla orange cake and almonds grassy notes in the margin a few mineral touches and metal polish orange again then darker notes toffee caramel moving towards burnt toast maybe peat? candied ginger as well pear jelly beans and back to more austere notes rooty notes and zesty grapefruit interesting combination medium long partly sweet partly zesty with a decent amount of herbs and some cold ashes'\n```\n:::\n:::\n\n\n::: {#460d8328 .cell execution_count=12}\n``` {.python .cell-code}\nreview_flag=data002[\"review_flag\"].tolist()\n```\n:::\n\n\n::: {#6a93277a .cell execution_count=13}\n``` {.python .cell-code}\nreview_score=data002[\"all_page_score\"].tolist()\n```\n:::\n\n\n::: {#f344676f .cell execution_count=14}\n``` {.python .cell-code}\nreview_flag[2]\n```\n\n::: {.cell-output .cell-output-display execution_count=145}\n```\n0\n```\n:::\n:::\n\n\n::: {#375a4ae9 .cell execution_count=15}\n``` {.python .cell-code}\nfrom collections import Counter\nCounter(review_flag)\n```\n\n::: {.cell-output .cell-output-display execution_count=146}\n```\nCounter({0: 3402, 1: 1231})\n```\n:::\n:::\n\n\n::: {#9823ef32 .cell execution_count=16}\n``` {.python .cell-code}\nprint(len(review))\n\nprint(len(review_flag))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4633\n4633\n```\n:::\n:::\n\n\n# transfer data\n\n::: {#139776e3 .cell execution_count=17}\n``` {.python .cell-code}\nimport tensorflow as tf\nimport numpy as np \nfrom tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n```\n:::\n\n\n::: {#54cd6002 .cell execution_count=18}\n``` {.python .cell-code}\n# Initialize the Tokenizer class\ntokenizer = Tokenizer()\n\n# Generate the word index dictionary\ntokenizer.fit_on_texts(review)\n\n# Define the total words. You add 1 for the index `0` which is just the padding token.\ntotal_words = len(tokenizer.word_index) + 1\n```\n:::\n\n\n::: {#dcb7f0ce .cell execution_count=19}\n``` {.python .cell-code}\nprint(f'total words: {total_words}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ntotal words: 12598\n```\n:::\n:::\n\n\n::: {#d4b93408 .cell execution_count=20}\n``` {.python .cell-code}\n# Convert labels lists to numpy array\nreview_flag_final = np.array(review_flag)\nreview_score_final = np.array(review_score)\n```\n:::\n\n\n::: {#bc61955d .cell execution_count=21}\n``` {.python .cell-code}\n# Parameters\nvocab_size = 7000\nmax_length = 300\nembedding_dim = 16\n#trunc_type='pre'\ntrunc_type='post'\noov_tok = \"<OOV>\"\n```\n:::\n\n\n::: {#d96d0fa7 .cell execution_count=22}\n``` {.python .cell-code}\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\n\n# Initialize the Tokenizer class\ntokenizer = Tokenizer(num_words = vocab_size, oov_token=oov_tok)\n\n# Generate the word index dictionary for the training sentences\ntokenizer.fit_on_texts(review)\nword_index = tokenizer.word_index\n\n# Generate and pad the training sequences\nsequences = tokenizer.texts_to_sequences(review)\npadded = pad_sequences(sequences,maxlen=max_length, truncating=trunc_type)\n```\n:::\n\n\n::: {#ef53e29f .cell execution_count=23}\n``` {.python .cell-code}\nlen(review[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=154}\n```\n813\n```\n:::\n:::\n\n\n::: {#f5895575 .cell execution_count=24}\n``` {.python .cell-code}\nlen(padded[4])\n```\n\n::: {.cell-output .cell-output-display execution_count=155}\n```\n300\n```\n:::\n:::\n\n\n::: {#d8b647eb .cell execution_count=25}\n``` {.python .cell-code}\nreverse_word_index = dict([(value, key) for (key, value) in word_index.items()])            \n\ndef decode_review(text):\n    return ' '.join([reverse_word_index.get(i, '?') for i in text])\n```\n:::\n\n\n::: {#f95d82a8 .cell execution_count=26}\n``` {.python .cell-code}\nprint(decode_review(padded[4]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? midleton very rare 2020 40 ob 2020 a lot of vanilla of a natural kind combined with marzipan and toffee also a good dose of summery fruit juicy pears and banana peach and tangerine peel hints of polished wood and light floral touches the pot still spice is there as well showing light nutmeg and pepper oily but also a little silent struggling to get going but after the initial sip it becomes more decidely fruity mostly on orange peaches pineapple and lemon candy again toning down the tropical notes a little compared to previous years a lot of vanilla cake and custard with a very creamy texture almond paste moving towards citrus peels with a little chilli and nutmeg ending with hints of raw barley and peppery oak in the end medium still creamy now slightly more grainy showing oak spice as it fades away\n```\n:::\n:::\n\n\nafter tokenizer\n\n::: {#7ff1578b .cell execution_count=27}\n``` {.python .cell-code}\nprint(sequences[4])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[3324, 22, 1132, 286, 289, 42, 286, 4, 121, 3, 21, 3, 4, 661, 269, 1395, 5, 299, 2, 90, 35, 4, 174, 496, 3, 1195, 16, 176, 156, 2, 101, 293, 2, 361, 182, 8, 3, 202, 51, 2, 28, 95, 108, 6, 1451, 50, 100, 46, 190, 10, 15, 231, 28, 123, 2, 32, 120, 12, 35, 4, 30, 2119, 2880, 34, 323, 973, 12, 111, 6, 1997, 3593, 24, 280, 13, 6582, 37, 397, 25, 26, 125, 77, 2, 48, 144, 33, 4450, 689, 6, 145, 7, 4, 30, 932, 34, 1098, 693, 4, 121, 3, 21, 114, 2, 278, 5, 4, 22, 141, 388, 343, 818, 504, 83, 70, 162, 5, 4, 30, 656, 2, 123, 2368, 5, 8, 3, 508, 209, 2, 128, 19, 14, 6, 82, 56, 50, 141, 52, 29, 13, 310, 231, 19, 100, 10, 24, 489, 627]\n```\n:::\n:::\n\n\n::: {#c5570629 .cell execution_count=28}\n``` {.python .cell-code}\nreview_flag[4]\n```\n\n::: {.cell-output .cell-output-display execution_count=159}\n```\n0\n```\n:::\n:::\n\n\n# using 4000 to train and 633 to test\n\n::: {#41354e51 .cell execution_count=29}\n``` {.python .cell-code}\npadded_train=padded[0:4000]\npadded_test=padded[4000:]\n```\n:::\n\n\n::: {#fb08ab5d .cell execution_count=30}\n``` {.python .cell-code}\nreview_flag_final_train=review_flag_final[0:4000]\nreview_flag_final_test=review_flag_final[4000:]\n```\n:::\n\n\n::: {#796c7aee .cell execution_count=31}\n``` {.python .cell-code}\nreview_socre_final_train=review_score_final[0:4000]\nreview_socre_final_test=review_score_final[4000:]\n```\n:::\n\n\n## total\n\n::: {#0fc1c9e0 .cell execution_count=32}\n``` {.python .cell-code}\nlen(padded)\nlen(review_flag_final)\n```\n\n::: {.cell-output .cell-output-display execution_count=163}\n```\n4633\n```\n:::\n:::\n\n\n## train\n\n::: {#d446dbae .cell execution_count=33}\n``` {.python .cell-code}\nlen(padded_train)\nlen(review_flag_final_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=164}\n```\n4000\n```\n:::\n:::\n\n\n## test\n\n::: {#3b8ccefb .cell execution_count=34}\n``` {.python .cell-code}\nlen(padded_test)\nlen(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=165}\n```\n633\n```\n:::\n:::\n\n\n::: {#bf4e4b5c .cell execution_count=35}\n``` {.python .cell-code}\nsum(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=166}\n```\n168\n```\n:::\n:::\n\n\n## if all guess lower than 90 points then 0.72 accuracy \n\n::: {#a6d04a4f .cell execution_count=36}\n``` {.python .cell-code}\n(len(review_flag_final_test)-sum(review_flag_final_test))/len(review_flag_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=167}\n```\n0.7345971563981043\n```\n:::\n:::\n\n\n# dummy model\n\ntrainning score average is 86\n\n::: {#24d7f0ef .cell execution_count=37}\n``` {.python .cell-code}\nsum(review_socre_final_train)/len(review_socre_final_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=168}\n```\n86.6125\n```\n:::\n:::\n\n\n::: {#d146bed8 .cell execution_count=38}\n``` {.python .cell-code}\nimport numpy as np\nsum(np.absolute(86-review_socre_final_test))/len(review_socre_final_train)\n```\n\n::: {.cell-output .cell-output-display execution_count=169}\n```\n0.54325\n```\n:::\n:::\n\n\n# DNN regression model \n\n::: {#b62065f9 .cell execution_count=39}\n``` {.python .cell-code}\n# Build the model\nmodel_dnn= tf.keras.Sequential([\n    tf.keras.layers.Embedding(input_dim=vocab_size,output_dim=32),\n    tf.keras.layers.GlobalAveragePooling1D(),\n    tf.keras.layers.Dense(32, activation='relu'),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(24, activation='relu'),\n    tf.keras.layers.Dense(1)\n])\n```\n:::\n\n\n::: {#a18207c4 .cell execution_count=40}\n``` {.python .cell-code}\n# Initialize the optimizer\noptimizer = tf.keras.optimizers.Adam(0.001)\n\n# Set the training parameters\nmodel_dnn.compile(loss=tf.keras.losses.Huber(), optimizer=optimizer, metrics=[\"mae\"])\n```\n:::\n\n\n::: {#c9cf0c93 .cell execution_count=41}\n``` {.python .cell-code}\nmodel_dnn.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling1d_2      │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n:::\n\n\n## train model\n\n::: {#9e5027ee .cell execution_count=42}\n``` {.python .cell-code}\n# Train the model\nhistory = model_dnn.fit(x=padded_train, y=review_socre_final_train,validation_data=(padded_test, review_socre_final_test),epochs=200,verbose=0 )\n\n#history = model_dnn.fit(x=padded_train, y=review_socre_final_train,validation_split=0.2,epochs=20)\n```\n:::\n\n\n## save model\n\n::: {#981ca543 .cell execution_count=43}\n``` {.python .cell-code}\nmodel_dnn.save('whiskynote_score_dnn.keras')\n```\n:::\n\n\n## load model\n\n::: {#3e80470e .cell execution_count=44}\n``` {.python .cell-code}\nnew_model = tf.keras.models.load_model('whiskynote_score_dnn.keras')\n```\n:::\n\n\n::: {#8a83a512 .cell execution_count=45}\n``` {.python .cell-code}\nnew_model.summary()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_2\"</span>\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)         │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">300</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)          │       <span style=\"color: #00af00; text-decoration-color: #00af00\">224,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ global_average_pooling1d_2      │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling1D</span>)        │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_8 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)               │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,056</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_9 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │           <span style=\"color: #00af00; text-decoration-color: #00af00\">792</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_10 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">24</span>)               │           <span style=\"color: #00af00; text-decoration-color: #00af00\">600</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_11 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                │            <span style=\"color: #00af00; text-decoration-color: #00af00\">25</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">679,421</span> (2.59 MB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">226,473</span> (884.66 KB)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">452,948</span> (1.73 MB)\n</pre>\n```\n:::\n:::\n\n\n::: {#39465f24 .cell execution_count=46}\n``` {.python .cell-code}\nloss = history.history['loss']\nval_loss = history.history['val_loss']\n\nmae = history.history['mae']\nval_mae = history.history['val_mae']\n\nepochs = range(len(val_loss))\n```\n:::\n\n\n::: {#bfece766 .cell execution_count=47}\n``` {.python .cell-code}\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\n\nplt.plot(epochs, loss, 'r', label='Training Loss')\nplt.plot(epochs, val_loss, 'b', label='Validation Loss')\nplt.title('DNN model Training and validation loss')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-48-output-1.png){width=566 height=431}\n:::\n:::\n\n\n::: {#2fd6b1e9 .cell execution_count=48}\n``` {.python .cell-code}\nimport matplotlib.image as mpimg\nimport matplotlib.pyplot as plt\n#------------------------------------------------\n# Plot training and validation loss per epoch\n#------------------------------------------------\n\nplt.plot(epochs, mae, 'r', label='Training mae')\nplt.plot(epochs, val_mae, 'b', label='Validation mae')\nplt.title('DNN model Training and validation mae')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-49-output-1.png){width=566 height=431}\n:::\n:::\n\n\n::: {#f8661679 .cell execution_count=49}\n``` {.python .cell-code}\n# Only plot the last 80% of the epochs\nzoom_split = int(epochs[-1] * 0.2)\nepochs_zoom = epochs[zoom_split:]\nval_loss_zoom = val_loss[zoom_split:]\nloss_zoom = loss[zoom_split:]\n\n# Plot zoomed mae and loss\nplt.plot(epochs_zoom, loss_zoom, 'r', label='Training Loss')\nplt.plot(epochs_zoom, val_loss_zoom, 'b', label='Validation Loss')\nplt.title('DNN model Training and validation loss')\nplt.legend()\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-50-output-1.png){width=579 height=431}\n:::\n:::\n\n\n## predication\n\n::: {#3a09f138 .cell execution_count=50}\n``` {.python .cell-code}\nx = padded_test\ny = model_dnn.predict(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r 1/20 ━━━━━━━━━━━━━━━━━━━━ 0s 26ms/step\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r20/20 ━━━━━━━━━━━━━━━━━━━━ 0s 1ms/step \n```\n:::\n:::\n\n\n::: {#03775a91 .cell execution_count=51}\n``` {.python .cell-code}\nlen(padded_test)\nlen(y)\nlen(review_socre_final_test)\n```\n\n::: {.cell-output .cell-output-display execution_count=182}\n```\n633\n```\n:::\n:::\n\n\n::: {#f10d7e30 .cell execution_count=52}\n``` {.python .cell-code}\nreview_socre_final_test.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=183}\n```\n(633,)\n```\n:::\n:::\n\n\n::: {#0207ac97 .cell execution_count=53}\n``` {.python .cell-code}\ny.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=184}\n```\n(633, 1)\n```\n:::\n:::\n\n\n::: {#2d29a0cb .cell execution_count=54}\n``` {.python .cell-code}\ny2 = y.flatten()\n```\n:::\n\n\n::: {#bcb19fe0 .cell execution_count=55}\n``` {.python .cell-code}\ny2.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=186}\n```\n(633,)\n```\n:::\n:::\n\n\n::: {#c6e580dc .cell execution_count=56}\n``` {.python .cell-code}\ndataset = pd.DataFrame({'real': review_socre_final_test, 'predic': list(y2)}, columns=['real', 'predic'])\n```\n:::\n\n\n::: {#6323f7a1 .cell execution_count=57}\n``` {.python .cell-code}\ndataset['predic']=round(dataset['predic'])\ndataset['predic']=round(dataset['predic'])\n```\n:::\n\n\n::: {#3e639f05 .cell execution_count=58}\n``` {.python .cell-code}\ndataset=dataset>> mutate(predic=if_else(_.predic <70, 70, _.predic)\n                          ,dummy_pred=86\n                         ,diff=_.predic-_.real \n                         ,dummy_diff=_.dummy_pred-_.real\n                          )>> mutate(predic=if_else(_.predic >100,100, _.predic)\n                                     ,predic_class=if_else(_.predic >=90,1, 0)\n                                    ,real_class=if_else(_.real>=90,1, 0)\n                                    ,dummy_class=0\n                          )\n                          \ndataset002 = pd.concat([data002[4000:].reset_index(drop=True),dataset.reset_index(drop=True)], axis=1)                    \n```\n:::\n\n\n::: {#b1aa3e64 .cell execution_count=59}\n``` {.python .cell-code}\ndataset002.to_excel('pred.xlsx')\n```\n:::\n\n\n# mean absolute error \n\n::: {#71fce8a5 .cell execution_count=60}\n``` {.python .cell-code}\nsum(abs(dataset002['diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=191}\n```\n2.1421800947867298\n```\n:::\n:::\n\n\n::: {#d1b0531e .cell execution_count=61}\n``` {.python .cell-code}\nsum(abs(dataset002['dummy_diff']))/len(dataset002)\n```\n\n::: {.cell-output .cell-output-display execution_count=192}\n```\n3.432859399684044\n```\n:::\n:::\n\n\n::: {#5f3fcc8c .cell execution_count=62}\n``` {.python .cell-code}\nsum(dataset002['predic']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=193}\n```\n111\n```\n:::\n:::\n\n\n::: {#31072c1f .cell execution_count=63}\n``` {.python .cell-code}\nsum(dataset002['real']>=90)\n```\n\n::: {.cell-output .cell-output-display execution_count=194}\n```\n168\n```\n:::\n:::\n\n\n::: {#886b073d .cell execution_count=64}\n``` {.python .cell-code}\nfrom sklearn import metrics\nconfusion_matrix_dt = metrics.confusion_matrix(dataset002['real_class'],dataset002['predic_class']) \nconfusion_matrix_dt\n```\n\n::: {.cell-output .cell-output-display execution_count=195}\n```\narray([[438,  27],\n       [ 84,  84]])\n```\n:::\n:::\n\n\n::: {#261c00be .cell execution_count=65}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['predic_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=196}\n```\n0.8246445497630331\n```\n:::\n:::\n\n\n::: {#1bdd3b3a .cell execution_count=66}\n``` {.python .cell-code}\nfrom sklearn import metrics\naccuracy = metrics.accuracy_score(dataset002['real_class'],dataset002['dummy_class'])  \naccuracy\n```\n\n::: {.cell-output .cell-output-display execution_count=197}\n```\n0.7345971563981043\n```\n:::\n:::\n\n\n::: {#2441d20f .cell execution_count=67}\n``` {.python .cell-code}\nimport seaborn as sns\nfig, ax = plt.subplots()\n\nsns.scatterplot(data=dataset,x='real',y='predic',ax=ax)\nsns.regplot(data=dataset, x=\"real\", y=\"predic\", x_jitter=.15,ax=ax)\nax.set(xlim=(65, 100),ylim=(65, 100))\n```\n\n::: {.cell-output .cell-output-display}\n![](9 Keras regression model_files/figure-html/cell-68-output-1.png){width=606 height=434}\n:::\n:::\n\n\n# resource:\n\nhttps://www.tensorflow.org/tutorials/keras/regression\n\n",
    "supporting": [
      "9 Keras regression model_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}