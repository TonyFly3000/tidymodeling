{
  "hash": "27402d37c3c580f4a580fd2d9986cf70",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Level 1 Regression Tensorflow model\"\nsubtitle: \"with house price data\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n# load package\n\n::: {#e74f5a21 .cell execution_count=1}\n``` {.python .cell-code}\nimport tensorflow_decision_forests as tfdf\nimport pandas as pd\n\nimport tensorflow as tf\nimport tensorflow_decision_forests as tfdf\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n::: {#638927b2 .cell execution_count=2}\n``` {.python .cell-code}\nprint(\"TensorFlow v\" + tf.__version__)\nprint(\"TensorFlow Decision Forests v\" + tfdf.__version__)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTensorFlow v2.16.1\nTensorFlow Decision Forests v1.9.0\n```\n:::\n:::\n\n\n# data preparation\n\n## read data\n\n::: {#34270e3e .cell execution_count=3}\n``` {.python .cell-code}\ntrain_file_path = \"data/train.csv\"\ndataset_df = pd.read_csv(train_file_path)\nprint(\"Full train dataset shape is {}\".format(dataset_df.shape))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFull train dataset shape is (1460, 81)\n```\n:::\n:::\n\n\n::: {#7621368b .cell execution_count=4}\n``` {.python .cell-code}\ndataset_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 81 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#e427647d .cell execution_count=5}\n``` {.python .cell-code}\ndataset_df = dataset_df.drop('Id', axis=1)\ndataset_df.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>LotConfig</th>\n      <th>...</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>65.0</td>\n      <td>8450</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>2</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>208500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20</td>\n      <td>RL</td>\n      <td>80.0</td>\n      <td>9600</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>FR2</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>5</td>\n      <td>2007</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>181500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>60</td>\n      <td>RL</td>\n      <td>68.0</td>\n      <td>11250</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>Inside</td>\n      <td>...</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>9</td>\n      <td>2008</td>\n      <td>WD</td>\n      <td>Normal</td>\n      <td>223500</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 80 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {#3e1e6dae .cell execution_count=6}\n``` {.python .cell-code}\ndataset_df.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1460 entries, 0 to 1459\nData columns (total 80 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   MSSubClass     1460 non-null   int64  \n 1   MSZoning       1460 non-null   object \n 2   LotFrontage    1201 non-null   float64\n 3   LotArea        1460 non-null   int64  \n 4   Street         1460 non-null   object \n 5   Alley          91 non-null     object \n 6   LotShape       1460 non-null   object \n 7   LandContour    1460 non-null   object \n 8   Utilities      1460 non-null   object \n 9   LotConfig      1460 non-null   object \n 10  LandSlope      1460 non-null   object \n 11  Neighborhood   1460 non-null   object \n 12  Condition1     1460 non-null   object \n 13  Condition2     1460 non-null   object \n 14  BldgType       1460 non-null   object \n 15  HouseStyle     1460 non-null   object \n 16  OverallQual    1460 non-null   int64  \n 17  OverallCond    1460 non-null   int64  \n 18  YearBuilt      1460 non-null   int64  \n 19  YearRemodAdd   1460 non-null   int64  \n 20  RoofStyle      1460 non-null   object \n 21  RoofMatl       1460 non-null   object \n 22  Exterior1st    1460 non-null   object \n 23  Exterior2nd    1460 non-null   object \n 24  MasVnrType     588 non-null    object \n 25  MasVnrArea     1452 non-null   float64\n 26  ExterQual      1460 non-null   object \n 27  ExterCond      1460 non-null   object \n 28  Foundation     1460 non-null   object \n 29  BsmtQual       1423 non-null   object \n 30  BsmtCond       1423 non-null   object \n 31  BsmtExposure   1422 non-null   object \n 32  BsmtFinType1   1423 non-null   object \n 33  BsmtFinSF1     1460 non-null   int64  \n 34  BsmtFinType2   1422 non-null   object \n 35  BsmtFinSF2     1460 non-null   int64  \n 36  BsmtUnfSF      1460 non-null   int64  \n 37  TotalBsmtSF    1460 non-null   int64  \n 38  Heating        1460 non-null   object \n 39  HeatingQC      1460 non-null   object \n 40  CentralAir     1460 non-null   object \n 41  Electrical     1459 non-null   object \n 42  1stFlrSF       1460 non-null   int64  \n 43  2ndFlrSF       1460 non-null   int64  \n 44  LowQualFinSF   1460 non-null   int64  \n 45  GrLivArea      1460 non-null   int64  \n 46  BsmtFullBath   1460 non-null   int64  \n 47  BsmtHalfBath   1460 non-null   int64  \n 48  FullBath       1460 non-null   int64  \n 49  HalfBath       1460 non-null   int64  \n 50  BedroomAbvGr   1460 non-null   int64  \n 51  KitchenAbvGr   1460 non-null   int64  \n 52  KitchenQual    1460 non-null   object \n 53  TotRmsAbvGrd   1460 non-null   int64  \n 54  Functional     1460 non-null   object \n 55  Fireplaces     1460 non-null   int64  \n 56  FireplaceQu    770 non-null    object \n 57  GarageType     1379 non-null   object \n 58  GarageYrBlt    1379 non-null   float64\n 59  GarageFinish   1379 non-null   object \n 60  GarageCars     1460 non-null   int64  \n 61  GarageArea     1460 non-null   int64  \n 62  GarageQual     1379 non-null   object \n 63  GarageCond     1379 non-null   object \n 64  PavedDrive     1460 non-null   object \n 65  WoodDeckSF     1460 non-null   int64  \n 66  OpenPorchSF    1460 non-null   int64  \n 67  EnclosedPorch  1460 non-null   int64  \n 68  3SsnPorch      1460 non-null   int64  \n 69  ScreenPorch    1460 non-null   int64  \n 70  PoolArea       1460 non-null   int64  \n 71  PoolQC         7 non-null      object \n 72  Fence          281 non-null    object \n 73  MiscFeature    54 non-null     object \n 74  MiscVal        1460 non-null   int64  \n 75  MoSold         1460 non-null   int64  \n 76  YrSold         1460 non-null   int64  \n 77  SaleType       1460 non-null   object \n 78  SaleCondition  1460 non-null   object \n 79  SalePrice      1460 non-null   int64  \ndtypes: float64(3), int64(34), object(43)\nmemory usage: 912.6+ KB\n```\n:::\n:::\n\n\n## data pre\n\n::: {#115160a9 .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\ndef split_dataset(dataset, test_ratio=0.30):\n  test_indices = np.random.rand(len(dataset)) < test_ratio\n  return dataset[~test_indices], dataset[test_indices]\n\ntrain_ds_pd, valid_ds_pd = split_dataset(dataset_df)\nprint(\"{} examples in training, {} examples in testing.\".format(\n    len(train_ds_pd), len(valid_ds_pd)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1012 examples in training, 448 examples in testing.\n```\n:::\n:::\n\n\n::: {#c1eb3a51 .cell execution_count=8}\n``` {.python .cell-code}\nlabel = 'SalePrice'\ntrain_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)\nvalid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(valid_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)\n```\n:::\n\n\n# model\n\n\n## define model Keras random forest\n\n::: {#bf200d07 .cell execution_count=9}\n``` {.python .cell-code}\ntfdf.keras.get_all_models()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n[tensorflow_decision_forests.keras.RandomForestModel,\n tensorflow_decision_forests.keras.GradientBoostedTreesModel,\n tensorflow_decision_forests.keras.CartModel,\n tensorflow_decision_forests.keras.DistributedGradientBoostedTreesModel]\n```\n:::\n:::\n\n\n::: {#1bb82821 .cell execution_count=10}\n``` {.python .cell-code}\nrf = tfdf.keras.RandomForestModel(task = tfdf.keras.Task.REGRESSION)\nrf.compile(metrics=[\"mse\"]) # Optional, you can use this to include a list of eval metrics\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nUse /var/folders/v3/pzt9c47n1nbcsmybsg_w0lhw0000gn/T/tmpfvd0haib as temporary training directory\n```\n:::\n:::\n\n\n## train model\n\n::: {#a815593a .cell execution_count=11}\n``` {.python .cell-code}\nrf.fit(x=train_ds)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading training dataset...\nTraining dataset read in 0:00:01.592298. Found 1012 examples.\nTraining model...\nModel trained in 0:00:00.488444\nCompiling model...\nModel compiled.\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<tf_keras.src.callbacks.History at 0x10572d850>\n```\n:::\n:::\n\n\n::: {#7b5dd542 .cell execution_count=12}\n``` {.python .cell-code}\ntfdf.model_plotter.plot_model_in_colab(rf, tree_idx=0, max_depth=3)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n``````````{=html}\n\n<script src=\"https://d3js.org/d3.v6.min.js\"></script>\n<div id=\"tree_plot_19224086337a41508a0e132d171ce08e\"></div>\n<script>\n/*\n * Copyright 2021 Google LLC.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n *  Plotting of decision trees generated by TF-DF.\n *\n *  A tree is a recursive structure of node objects.\n *  A node contains one or more of the following components:\n *\n *    - A value: Representing the output of the node. If the node is not a leaf,\n *      the value is only present for analysis i.e. it is not used for\n *      predictions.\n *\n *    - A condition : For non-leaf nodes, the condition (also known as split)\n *      defines a binary test to branch to the positive or negative child.\n *\n *    - An explanation: Generally a plot showing the relation between the label\n *      and the condition to give insights about the effect of the condition.\n *\n *    - Two children : For non-leaf nodes, the children nodes. The first\n *      children (i.e. \"node.children[0]\") is the negative children (drawn in\n *      red). The second children is the positive one (drawn in green).\n *\n */\n\n/**\n * Plots a single decision tree into a DOM element.\n * @param {!options} options Dictionary of configurations.\n * @param {!tree} raw_tree Recursive tree structure.\n * @param {string} canvas_id Id of the output dom element.\n */\nfunction display_tree(options, raw_tree, canvas_id) {\n  console.log(options);\n\n  // Determine the node placement.\n  const tree_struct = d3.tree().nodeSize(\n      [options.node_y_offset, options.node_x_offset])(d3.hierarchy(raw_tree));\n\n  // Boundaries of the node placement.\n  let x_min = Infinity;\n  let x_max = -x_min;\n  let y_min = Infinity;\n  let y_max = -x_min;\n\n  tree_struct.each(d => {\n    if (d.x > x_max) x_max = d.x;\n    if (d.x < x_min) x_min = d.x;\n    if (d.y > y_max) y_max = d.y;\n    if (d.y < y_min) y_min = d.y;\n  });\n\n  // Size of the plot.\n  const width = y_max - y_min + options.node_x_size + options.margin * 2;\n  const height = x_max - x_min + options.node_y_size + options.margin * 2 +\n      options.node_y_offset - options.node_y_size;\n\n  const plot = d3.select(canvas_id);\n\n  // Tool tip\n  options.tooltip = plot.append('div')\n                        .attr('width', 100)\n                        .attr('height', 100)\n                        .style('padding', '4px')\n                        .style('background', '#fff')\n                        .style('box-shadow', '4px 4px 0px rgba(0,0,0,0.1)')\n                        .style('border', '1px solid black')\n                        .style('font-family', 'sans-serif')\n                        .style('font-size', options.font_size)\n                        .style('position', 'absolute')\n                        .style('z-index', '10')\n                        .attr('pointer-events', 'none')\n                        .style('display', 'none');\n\n  // Create canvas\n  const svg = plot.append('svg').attr('width', width).attr('height', height);\n  const graph =\n      svg.style('overflow', 'visible')\n          .append('g')\n          .attr('font-family', 'sans-serif')\n          .attr('font-size', options.font_size)\n          .attr(\n              'transform',\n              () => `translate(${options.margin},${\n                  - x_min + options.node_y_offset / 2 + options.margin})`);\n\n  // Plot bounding box.\n  if (options.show_plot_bounding_box) {\n    svg.append('rect')\n        .attr('width', width)\n        .attr('height', height)\n        .attr('fill', 'none')\n        .attr('stroke-width', 1.0)\n        .attr('stroke', 'black');\n  }\n\n  // Draw the edges.\n  display_edges(options, graph, tree_struct);\n\n  // Draw the nodes.\n  display_nodes(options, graph, tree_struct);\n}\n\n/**\n * Draw the nodes of the tree.\n * @param {!options} options Dictionary of configurations.\n * @param {!graph} graph D3 search handle containing the graph.\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n *     data, etc.).\n */\nfunction display_nodes(options, graph, tree_struct) {\n  const nodes = graph.append('g')\n                    .selectAll('g')\n                    .data(tree_struct.descendants())\n                    .join('g')\n                    .attr('transform', d => `translate(${d.y},${d.x})`);\n\n  nodes.append('rect')\n      .attr('x', 0.5)\n      .attr('y', 0.5)\n      .attr('width', options.node_x_size)\n      .attr('height', options.node_y_size)\n      .attr('stroke', 'lightgrey')\n      .attr('stroke-width', 1)\n      .attr('fill', 'white')\n      .attr('y', -options.node_y_size / 2);\n\n  // Brackets on the right of condition nodes without children.\n  non_leaf_node_without_children =\n      nodes.filter(node => node.data.condition != null && node.children == null)\n          .append('g')\n          .attr('transform', `translate(${options.node_x_size},0)`);\n\n  non_leaf_node_without_children.append('path')\n      .attr('d', 'M0,0 C 10,0 0,10 10,10')\n      .attr('fill', 'none')\n      .attr('stroke-width', 1.0)\n      .attr('stroke', '#F00');\n\n  non_leaf_node_without_children.append('path')\n      .attr('d', 'M0,0 C 10,0 0,-10 10,-10')\n      .attr('fill', 'none')\n      .attr('stroke-width', 1.0)\n      .attr('stroke', '#0F0');\n\n  const node_content = nodes.append('g').attr(\n      'transform',\n      `translate(0,${options.node_padding - options.node_y_size / 2})`);\n\n  node_content.append(node => create_node_element(options, node));\n}\n\n/**\n * Creates the D3 content for a single node.\n * @param {!options} options Dictionary of configurations.\n * @param {!node} node Node to draw.\n * @return {!d3} D3 content.\n */\nfunction create_node_element(options, node) {\n  // Output accumulator.\n  let output = {\n    // Content to draw.\n    content: d3.create('svg:g'),\n    // Vertical offset to the next element to draw.\n    vertical_offset: 0\n  };\n\n  // Conditions.\n  if (node.data.condition != null) {\n    display_condition(options, node.data.condition, output);\n  }\n\n  // Values.\n  if (node.data.value != null) {\n    display_value(options, node.data.value, output);\n  }\n\n  // Explanations.\n  if (node.data.explanation != null) {\n    display_explanation(options, node.data.explanation, output);\n  }\n\n  return output.content.node();\n}\n\n\n/**\n * Adds a single line of text inside of a node.\n * @param {!options} options Dictionary of configurations.\n * @param {string} text Text to display.\n * @param {!output} output Output display accumulator.\n */\nfunction display_node_text(options, text, output) {\n  output.content.append('text')\n      .attr('x', options.node_padding)\n      .attr('y', output.vertical_offset)\n      .attr('alignment-baseline', 'hanging')\n      .text(text);\n  output.vertical_offset += 10;\n}\n\n/**\n * Adds a single line of text inside of a node with a tooltip.\n * @param {!options} options Dictionary of configurations.\n * @param {string} text Text to display.\n * @param {string} tooltip Text in the Tooltip.\n * @param {!output} output Output display accumulator.\n */\nfunction display_node_text_with_tooltip(options, text, tooltip, output) {\n  const item = output.content.append('text')\n                   .attr('x', options.node_padding)\n                   .attr('alignment-baseline', 'hanging')\n                   .text(text);\n\n  add_tooltip(options, item, () => tooltip);\n  output.vertical_offset += 10;\n}\n\n/**\n * Adds a tooltip to a dom element.\n * @param {!options} options Dictionary of configurations.\n * @param {!dom} target Dom element to equip with a tooltip.\n * @param {!func} get_content Generates the html content of the tooltip.\n */\nfunction add_tooltip(options, target, get_content) {\n  function show(d) {\n    options.tooltip.style('display', 'block');\n    options.tooltip.html(get_content());\n  }\n\n  function hide(d) {\n    options.tooltip.style('display', 'none');\n  }\n\n  function move(d) {\n    options.tooltip.style('display', 'block');\n    options.tooltip.style('left', (d.pageX + 5) + 'px');\n    options.tooltip.style('top', d.pageY + 'px');\n  }\n\n  target.on('mouseover', show);\n  target.on('mouseout', hide);\n  target.on('mousemove', move);\n}\n\n/**\n * Adds a condition inside of a node.\n * @param {!options} options Dictionary of configurations.\n * @param {!condition} condition Condition to display.\n * @param {!output} output Output display accumulator.\n */\nfunction display_condition(options, condition, output) {\n  threshold_format = d3.format('r');\n\n  if (condition.type === 'IS_MISSING') {\n    display_node_text(options, `${condition.attribute} is missing`, output);\n    return;\n  }\n\n  if (condition.type === 'IS_TRUE') {\n    display_node_text(options, `${condition.attribute} is true`, output);\n    return;\n  }\n\n  if (condition.type === 'NUMERICAL_IS_HIGHER_THAN') {\n    format = d3.format('r');\n    display_node_text(\n        options,\n        `${condition.attribute} >= ${threshold_format(condition.threshold)}`,\n        output);\n    return;\n  }\n\n  if (condition.type === 'CATEGORICAL_IS_IN') {\n    display_node_text_with_tooltip(\n        options, `${condition.attribute} in [...]`,\n        `${condition.attribute} in [${condition.mask}]`, output);\n    return;\n  }\n\n  if (condition.type === 'CATEGORICAL_SET_CONTAINS') {\n    display_node_text_with_tooltip(\n        options, `${condition.attribute} intersect [...]`,\n        `${condition.attribute} intersect [${condition.mask}]`, output);\n    return;\n  }\n\n  if (condition.type === 'NUMERICAL_SPARSE_OBLIQUE') {\n    display_node_text_with_tooltip(\n        options, `Sparse oblique split...`,\n        `[${condition.attributes}]*[${condition.weights}]>=${\n            threshold_format(condition.threshold)}`,\n        output);\n    return;\n  }\n\n  display_node_text(\n      options, `Non supported condition ${condition.type}`, output);\n}\n\n/**\n * Adds a value inside of a node.\n * @param {!options} options Dictionary of configurations.\n * @param {!value} value Value to display.\n * @param {!output} output Output display accumulator.\n */\nfunction display_value(options, value, output) {\n  if (value.type === 'PROBABILITY') {\n    const left_margin = 0;\n    const right_margin = 50;\n    const plot_width = options.node_x_size - options.node_padding * 2 -\n        left_margin - right_margin;\n\n    let cusum = Array.from(d3.cumsum(value.distribution));\n    cusum.unshift(0);\n    const distribution_plot = output.content.append('g').attr(\n        'transform', `translate(0,${output.vertical_offset + 0.5})`);\n\n    distribution_plot.selectAll('rect')\n        .data(value.distribution)\n        .join('rect')\n        .attr('height', 10)\n        .attr(\n            'x',\n            (d, i) =>\n                (cusum[i] * plot_width + left_margin + options.node_padding))\n        .attr('width', (d, i) => d * plot_width)\n        .style('fill', (d, i) => d3.schemeSet1[i]);\n\n    const num_examples =\n        output.content.append('g')\n            .attr('transform', `translate(0,${output.vertical_offset})`)\n            .append('text')\n            .attr('x', options.node_x_size - options.node_padding)\n            .attr('alignment-baseline', 'hanging')\n            .attr('text-anchor', 'end')\n            .text(`(${value.num_examples})`);\n\n    const distribution_details = d3.create('ul');\n    distribution_details.selectAll('li')\n        .data(value.distribution)\n        .join('li')\n        .append('span')\n        .text(\n            (d, i) =>\n                'class ' + i + ': ' + d3.format('.3%')(value.distribution[i]));\n\n    add_tooltip(options, distribution_plot, () => distribution_details.html());\n    add_tooltip(options, num_examples, () => 'Number of examples');\n\n    output.vertical_offset += 10;\n    return;\n  }\n\n  if (value.type === 'REGRESSION') {\n    display_node_text(\n        options,\n        'value: ' + d3.format('r')(value.value) + ` (` +\n            d3.format('.6')(value.num_examples) + `)`,\n        output);\n    return;\n  }\n\n  if (value.type === 'UPLIFT') {\n    display_node_text(\n        options,\n        'effect: ' + d3.format('r')(value.treatment_effect) + ` (` +\n            d3.format('.6')(value.num_examples) + `)`,\n        output);\n    return;\n  }\n\n  display_node_text(options, `Non supported value ${value.type}`, output);\n}\n\n/**\n * Adds an explanation inside of a node.\n * @param {!options} options Dictionary of configurations.\n * @param {!explanation} explanation Explanation to display.\n * @param {!output} output Output display accumulator.\n */\nfunction display_explanation(options, explanation, output) {\n  // Margin before the explanation.\n  output.vertical_offset += 10;\n\n  display_node_text(\n      options, `Non supported explanation ${explanation.type}`, output);\n}\n\n\n/**\n * Draw the edges of the tree.\n * @param {!options} options Dictionary of configurations.\n * @param {!graph} graph D3 search handle containing the graph.\n * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n *     data, etc.).\n */\nfunction display_edges(options, graph, tree_struct) {\n  // Draw an edge between a parent and a child node with a bezier.\n  function draw_single_edge(d) {\n    return 'M' + (d.source.y + options.node_x_size) + ',' + d.source.x + ' C' +\n        (d.source.y + options.node_x_size + options.edge_rounding) + ',' +\n        d.source.x + ' ' + (d.target.y - options.edge_rounding) + ',' +\n        d.target.x + ' ' + d.target.y + ',' + d.target.x;\n  }\n\n  graph.append('g')\n      .attr('fill', 'none')\n      .attr('stroke-width', 1.2)\n      .selectAll('path')\n      .data(tree_struct.links())\n      .join('path')\n      .attr('d', draw_single_edge)\n      .attr(\n          'stroke', d => (d.target === d.source.children[0]) ? '#0F0' : '#F00');\n}\n\ndisplay_tree({\"margin\": 10, \"node_x_size\": 160, \"node_y_size\": 28, \"node_x_offset\": 180, \"node_y_offset\": 33, \"font_size\": 10, \"edge_rounding\": 20, \"node_padding\": 2, \"show_plot_bounding_box\": false}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 183384.8125, \"num_examples\": 1012.0, \"standard_deviation\": 81823.21337079075}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"ExterQual\", \"mask\": [\"Gd\", \"Ex\"]}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 246352.109375, \"num_examples\": 382.0, \"standard_deviation\": 86449.45342544401}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"GarageCars\", \"threshold\": 2.5}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 331757.28125, \"num_examples\": 122.0, \"standard_deviation\": 89806.03329072129}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"Neighborhood\", \"mask\": [\"OldTown\", \"NridgHt\", \"NoRidge\", \"StoneBr\"]}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 377510.3125, \"num_examples\": 67.0, \"standard_deviation\": 83146.49177456836}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"KitchenQual\", \"mask\": [\"Ex\"]}}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 276021.78125, \"num_examples\": 55.0, \"standard_deviation\": 61738.915386029454}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"MoSold\", \"threshold\": 4.5}}]}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 206277.375, \"num_examples\": 260.0, \"standard_deviation\": 46554.59688548922}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"1stFlrSF\", \"threshold\": 1443.0}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 252448.609375, \"num_examples\": 63.0, \"standard_deviation\": 44828.17374472188}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"Neighborhood\", \"mask\": [\"Somerst\", \"Edwards\", \"NoRidge\", \"ClearCr\", \"Veenker\"]}}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 191511.96875, \"num_examples\": 197.0, \"standard_deviation\": 36304.6625736636}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"BedroomAbvGr\", \"threshold\": 3.5}}]}]}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 145204.640625, \"num_examples\": 630.0, \"standard_deviation\": 48592.03891162618}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"GrLivArea\", \"threshold\": 1475.5}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 186373.75, \"num_examples\": 208.0, \"standard_deviation\": 51470.71054901658}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"Neighborhood\", \"mask\": [\"CollgCr\", \"Somerst\", \"NridgHt\", \"Crawfor\", \"ClearCr\"]}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 238493.140625, \"num_examples\": 41.0, \"standard_deviation\": 66746.82312529972}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"OverallQual\", \"threshold\": 7.5}}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 173577.96875, \"num_examples\": 167.0, \"standard_deviation\": 37084.06865293657}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"KitchenQual\", \"mask\": [\"Gd\"]}}]}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 124912.765625, \"num_examples\": 422.0, \"standard_deviation\": 31177.72963632215}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"OverallQual\", \"threshold\": 4.5}, \"children\": [{\"value\": {\"type\": \"REGRESSION\", \"value\": 133860.9375, \"num_examples\": 328.0, \"standard_deviation\": 26143.66795804255}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"1stFlrSF\", \"threshold\": 1090.0}}, {\"value\": {\"type\": \"REGRESSION\", \"value\": 93689.359375, \"num_examples\": 94.0, \"standard_deviation\": 26919.250209615697}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"CentralAir\", \"mask\": [\"Y\"]}}]}]}]}, \"#tree_plot_19224086337a41508a0e132d171ce08e\")\n</script>\n``````````\n:::\n:::\n\n\n::: {#7f49ffd8 .cell execution_count=13}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nlogs = rf.make_inspector().training_logs()\nplt.plot([log.num_trees for log in logs], [log.evaluation.rmse for log in logs])\nplt.xlabel(\"Number of trees\")\nplt.ylabel(\"RMSE (out-of-bag)\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Level 1 Regression tensorflow_files/figure-html/cell-14-output-1.png){width=610 height=429}\n:::\n:::\n\n\n::: {#613ff893 .cell execution_count=14}\n``` {.python .cell-code}\ninspector = rf.make_inspector()\ninspector.evaluation()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\nEvaluation(num_examples=1012, accuracy=None, loss=None, rmse=29144.798502788246, ndcg=None, aucs=None, auuc=None, qini=None)\n```\n:::\n:::\n\n\n::: {#47e504c9 .cell execution_count=15}\n``` {.python .cell-code}\nevaluation = rf.evaluate(x=valid_ds,return_dict=True)\n\nfor name, value in evaluation.items():\n  print(f\"{name}: {value:.4f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/1 [==============================] - ETA: 0s - loss: 0.0000e+00 - mse: 912837952.0000\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r1/1 [==============================] - 2s 2s/step - loss: 0.0000e+00 - mse: 912837952.0000\nloss: 0.0000\nmse: 912837952.0000\n```\n:::\n:::\n\n\n::: {#6540dc29 .cell execution_count=16}\n``` {.python .cell-code}\nfor name, value in evaluation.items():\n  mse=value\n```\n:::\n\n\nRMSE\n\n::: {#cf563b99 .cell execution_count=17}\n``` {.python .cell-code}\nimport math\nmath.sqrt(mse)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n30213.208237458002\n```\n:::\n:::\n\n\n## Variable importances\n\n::: {#a98224b7 .cell execution_count=18}\n``` {.python .cell-code}\nprint(f\"Available variable importances:\")\nfor importance in inspector.variable_importances().keys():\n  print(\"\\t\", importance)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAvailable variable importances:\n\t INV_MEAN_MIN_DEPTH\n\t NUM_NODES\n\t NUM_AS_ROOT\n\t SUM_SCORE\n```\n:::\n:::\n\n\n# future prediction\n\n::: {#d1fa092a .cell execution_count=19}\n``` {.python .cell-code}\ntest_file_path = \"data/test.csv\"\ntest_data = pd.read_csv(test_file_path)\nids = test_data.pop('Id')\n\ntest_ds = tfdf.keras.pd_dataframe_to_tf_dataset(\n    test_data,\n    task = tfdf.keras.Task.REGRESSION)\n\npreds = rf.predict(test_ds)\noutput = pd.DataFrame({'Id': ids,\n                       'SalePrice': preds.squeeze()})\n\noutput.head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\r1/2 [==============>...............] - ETA: 0s\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\r2/2 [==============================] - 0s 11ms/step\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>125914.187500</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>152230.437500</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>175308.421875</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>183049.640625</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>196592.921875</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n# save model\n\n::: {#9156aacb .cell execution_count=20}\n``` {.python .cell-code}\nrf.save(\"tf_random_forest_model\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nINFO:tensorflow:Assets written to: tf_random_forest_model/assets\n```\n:::\n:::\n\n\n# resouece\n\nhttps://www.kaggle.com/code/gusthema/house-prices-prediction-using-tfdf\n\n",
    "supporting": [
      "Level 1 Regression tensorflow_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}