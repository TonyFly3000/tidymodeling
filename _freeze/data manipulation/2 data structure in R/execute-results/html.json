{
  "hash": "85298f7463b4ee75f54f2dc76d513837",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data structure in R\"\n\nauthor: \"Tony Duan\"\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n![](images/download.jpg){width=\"600\"}\n\n\n\n# vector\n\nA vector is an ordered collection of basic data types of a given length. The only key thing here is all the elements of a vector must be same data type e.g homogeneous data structures. Vectors are one-dimensional data structures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 2, 3, 4)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb =  c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n## create vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 14, by = 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12 14\n```\n\n\n:::\n:::\n\n\nother way:\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(x = 1.5, times = 4)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5 1.5 1.5 1.5\n```\n\n\n:::\n:::\n\n\n\n## append vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3)\ny=c(4,5,6)\nz=c(x,y)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n## calculate vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,4,5)\n\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n\n## select vector element\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3)\n\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n# Dataframe\n\nDataframes are generic data objects of R which are used to store the tabular data. Dataframes are the foremost popular data objects in R programming because we are comfortable in seeing the data within the tabular form. They are two-dimensional, heterogeneous data structures\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A vector which is a character vector\nName = c(\"Amiya\", \"Raj\", \"Asish\")\n\n# A vector which is a character vector\nLanguage = c(\"R\", \"Python\", \"Java\")\n\n# A vector which is a numeric vector\nAge = c(22, 25, 45)\n\n# To create dataframe use data.frame command\n# and then pass each of the vectors \n# we have created as arguments\n# to the function data.frame()\ndf = data.frame(Name, Language, Age)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Language Age\n1 Amiya        R  22\n2   Raj   Python  25\n3 Asish     Java  45\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n# Matrices\n\nA matrix is a rectangular arrangement of numbers in rows and columns. In a matrix, as we know rows are the ones that run horizontally and columns are the ones that run vertically. Matrices are two-dimensional, homogeneous data structures.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n    \n    # No of rows and columns\n    nrow = 3, ncol = 3,  \n\n    # By default matrices are \n    # in column-wise order \n    # So this parameter decides\n    # how to arrange the matrix          \n    byrow = TRUE                             \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix002=A+A\n\nmatrix002\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n[3,]   14   16   18\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix003=A*A\n\nmatrix003\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    9\n[2,]   16   25   36\n[3,]   49   64   81\n```\n\n\n:::\n:::\n\n\n# Lists\n\nA list is a generic object consisting of an ordered collection of objects. Lists are heterogeneous data structures. These are also one-dimensional data structures. A list can be a list of vectors, list of matrices, a list of characters and a list of functions and so on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempId = c(1, 2, 3, 4)\n\n# The second attribute is the employee name \n# which is created using this line of code here\n# which is the character vector \nempName = c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\n\n# The third attribute is the number of employees\n# which is a single numeric variable.\nnumberOfEmp = 4\n\n# We can combine all these three different\n# data types into a list\n# containing the details of employees\n# which can be done using a list command\nempList = list(empId, empName, numberOfEmp)\n\nempList\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n\n[[3]]\n[1] 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(empList)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n# Arrays\n\n3D arrays\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = array(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8),\n\n    # Creating two rectangular matrices \n    # each with two rows and two columns\n    dim = c(2, 2, 2)                        \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"array\"\n```\n\n\n:::\n:::\n\n\n\n# Reference:\n\nhttps://www.geeksforgeeks.org/data-structures-in-r-programming/\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}