{
  "hash": "a1cfc4e4940dea9e8eedb094783c7747",
  "result": {
    "engine": "knitr",
<<<<<<< HEAD
    "markdown": "---\ntitle: \"Data structure in R\"\n\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n![](images/download.jpg){width=\"600\"}\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n# vector\n\nA vector is an ordered collection of basic data types of a given length. The only key thing here is all the elements of a vector must be same data type e.g homogeneous data structures. Vectors are one-dimensional data structures.\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 2, 3, 4)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb =  c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n## create sequence vector\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 14, by = 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12 14\n```\n\n\n:::\n:::\n\n## create repeat vector\n::: {.cell}\n\n```{.r .cell-code}\nrep(x = 1.5, times = 4)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5 1.5 1.5 1.5\n```\n\n\n:::\n:::\n\n## create random vector\n\ncreate 5 random number from 1 to 10 without replacement\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10,5, replace=F) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1  4  5 10  7\n```\n\n\n:::\n:::\n\ncreate 5 random number from 1 to 10 with replacement\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10,5, replace=T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10  5  5  5  3\n```\n\n\n:::\n:::\n\n\ncreate 1 random number from 0 to 1 from random uniform distribution\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(1, min=0, max=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2410413\n```\n\n\n:::\n:::\n\ngenerate 4 random number that follows the normal distribution with mean being 0 and standard deviation being 1\n\n::: {.cell}\n\n```{.r .cell-code}\nsn1 <- rnorm(4, mean=0, sd=1) # standard nromal\nsn1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1.0518380 -1.7633553 -0.1999555 -1.4684027\n```\n\n\n:::\n:::\n\n## create unique vector\n\n::: {.cell}\n\n```{.r .cell-code}\nv1=c(1,1,2,2,5,6)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 2 2 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 5 6\n```\n\n\n:::\n:::\n\n\n## append vector\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3)\ny=c(4,5,6)\nz=c(x,y)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n## remove element in vector\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,4,5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n### remove first one\n::: {.cell}\n\n```{.r .cell-code}\nx[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5\n```\n\n\n:::\n:::\n\n\n### remove last one\n::: {.cell}\n\n```{.r .cell-code}\nx[-length(x)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n### remove from last second\n::: {.cell}\n\n```{.r .cell-code}\nx[1:(length(x)-2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n### remove from from another vector\n\n::: {.cell}\n\n```{.r .cell-code}\nremove=c(2,4)\nx[-remove]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\n## sort vector\n\n::: {.cell}\n\n```{.r .cell-code}\na=c(2,4,6,1,4)\n```\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4 4 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(a,decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 4 4 2 1\n```\n\n\n:::\n:::\n\n## vector length\n::: {.cell}\n\n```{.r .cell-code}\nlength(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n## calculate vector\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,4,5)\n\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n## select vector element\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,6,9,10)\n```\n:::\n\n\n### select first\n::: {.cell}\n\n```{.r .cell-code}\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\nor \n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n### select last\n::: {.cell}\n\n```{.r .cell-code}\nx %>% last()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\nor\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n### select second last\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n### select first to 3th\n::: {.cell}\n\n```{.r .cell-code}\nx[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n### select last one to last 3th\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-3:-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6  9 10\n```\n\n\n:::\n:::\n\n\n\n## compare two vector\n\n::: {.cell}\n\n```{.r .cell-code}\nxx=c(1,2,3,4)\nxx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyy=c(2,4)\nyy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4\n```\n\n\n:::\n:::\n\nfind number only in xx not in yy\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff(xx, yy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3\n```\n\n\n:::\n:::\n\n\n\n\n## vector  Converting between types\n\n\n### to factor\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"g\", \"b\")\ny=as.factor(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a g b\nLevels: a b g\n```\n\n\n:::\n:::\n\n\n\n### to numeric\n::: {.cell}\n\n```{.r .cell-code}\nx <- c('123','44', '222')\ny=as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123  44 222\n```\n\n\n:::\n:::\n\n\n### to character\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(123123,111,5555)\ny=as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"123123\" \"111\"    \"5555\"  \n```\n\n\n:::\n:::\n\n### to boolen\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,0,1)\ny=as.logical(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n## vector to other data format\n\n\n### vector to dataframe\n\n::: {.cell}\n\n```{.r .cell-code}\nName <- c(\"Jhon\", \"Lee\", \"Suzan\", \"Abhinav\", \n          \"Brain\", \"Emma\", \"David\", \"Alice\") \n\n   \nMarks <- c(56, 76, 86, 96, 73, 87, 47, 98) \n    \n\ndata<- data.frame(Name,Marks) \ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Marks\n1    Jhon    56\n2     Lee    76\n3   Suzan    86\n4 Abhinav    96\n5   Brain    73\n6    Emma    87\n7   David    47\n8   Alice    98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n### verctor to matrix\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(56, 76, 86, 96, 73, 87, 47, 98) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-matrix(v1,nrow=4)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   56   73\n[2,]   76   87\n[3,]   86   47\n[4,]   96   98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\nother way:\n::: {.cell}\n\n```{.r .cell-code}\ndata<-matrix(c(v1,v1),ncol = 2)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   56   56\n[2,]   76   76\n[3,]   86   86\n[4,]   96   96\n[5,]   73   73\n[6,]   87   87\n[7,]   47   47\n[8,]   98   98\n```\n\n\n:::\n:::\n\n\n### verctor to list\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=list(v1)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 56 76 86 96 73 87 47 98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\neach element in vetor as a element in list\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=as.list(v1)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 56\n\n[[2]]\n[1] 76\n\n[[3]]\n[1] 86\n\n[[4]]\n[1] 96\n\n[[5]]\n[1] 73\n\n[[6]]\n[1] 87\n\n[[7]]\n[1] 47\n\n[[8]]\n[1] 98\n```\n\n\n:::\n:::\n### verctor to array\n\n3D array\n::: {.cell}\n\n```{.r .cell-code}\nvec1=c(1:5) \n \nvec2=c(6:10) \n \narr=array(c(vec1,vec2),dim=c(2,5,3)) \n \n# printing the array\nclass(arr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"array\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 3\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n```\n\n\n:::\n:::\n\n# Dataframe\n\nDataframes are generic data objects of R which are used to store the tabular data. Dataframes are the foremost popular data objects in R programming because we are comfortable in seeing the data within the tabular form. They are two-dimensional, heterogeneous data structures\n\n::: {.cell}\n\n```{.r .cell-code}\n# A vector which is a character vector\nName = c(\"Amiya\", \"Raj\", \"Asish\")\n\n# A vector which is a character vector\nLanguage = c(\"R\", \"Python\", \"Java\")\n\n# A vector which is a numeric vector\nAge = c(22, 25, 45)\n\n# To create dataframe use data.frame command\n# and then pass each of the vectors \n# we have created as arguments\n# to the function data.frame()\ndf = data.frame(Name, Language, Age)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Language Age\n1 Amiya        R  22\n2   Raj   Python  25\n3 Asish     Java  45\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n## dataframe to other data format\n\n\n### dataframe to matrix\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- as.matrix(df)\n\nclass(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name    Language Age \n[1,] \"Amiya\" \"R\"      \"22\"\n[2,] \"Raj\"   \"Python\" \"25\"\n[3,] \"Asish\" \"Java\"   \"45\"\n```\n\n\n:::\n:::\n\n### dataframe to vector\n\n::: {.cell}\n\n```{.r .cell-code}\nvec=df[['Name']]\n\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Amiya\" \"Raj\"   \"Asish\"\n```\n\n\n:::\n:::\n\n### dataframe to list\n\n::: {.cell}\n\n```{.r .cell-code}\nlist=as.list(df[['Name']])\n\nclass(list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Amiya\"\n\n[[2]]\n[1] \"Raj\"\n\n[[3]]\n[1] \"Asish\"\n```\n\n\n:::\n:::\n\n# Matrices\n\nA matrix is a rectangular arrangement of numbers in rows and columns. In a matrix, as we know rows are the ones that run horizontally and columns are the ones that run vertically. Matrices are two-dimensional, homogeneous data structures.\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n    \n    # No of rows and columns\n    nrow = 3, ncol = 3,  \n\n    # By default matrices are \n    # in column-wise order \n    # So this parameter decides\n    # how to arrange the matrix          \n    byrow = TRUE                             \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix002=A+A\n\nmatrix002\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n[3,]   14   16   18\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix003=A*A\n\nmatrix003\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    9\n[2,]   16   25   36\n[3,]   49   64   81\n```\n\n\n:::\n:::\n\n## matrix to other data format\n\n\n### matrix to dataframe\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(matrix003)\n\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  V1 V2 V3\n1  1  4  9\n2 16 25 36\n3 49 64 81\n```\n\n\n:::\n:::\n\n### matrix to vector\n\n::: {.cell}\n\n```{.r .cell-code}\nvec=as.vector(matrix003)\n\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1 16 49  4 25 64  9 36 81\n```\n\n\n:::\n:::\n\n\n### matrix to list\n\n::: {.cell}\n\n```{.r .cell-code}\nlist=as.list(matrix003)\n\nclass(list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 49\n\n[[4]]\n[1] 4\n\n[[5]]\n[1] 25\n\n[[6]]\n[1] 64\n\n[[7]]\n[1] 9\n\n[[8]]\n[1] 36\n\n[[9]]\n[1] 81\n```\n\n\n:::\n:::\n\n# Lists\n\nA list is a generic object consisting of an ordered collection of objects. Lists are heterogeneous data structures. These are also one-dimensional data structures. A list can be a list of vectors, list of matrices, a list of characters and a list of functions and so on.\n\n::: {.cell}\n\n```{.r .cell-code}\nempId = c(1, 2, 3, 4)\n\n# The second attribute is the employee name \n# which is created using this line of code here\n# which is the character vector \nempName = c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\n\n# The third attribute is the number of employees\n# which is a single numeric variable.\nnumberOfEmp = 4\n\n# We can combine all these three different\n# data types into a list\n# containing the details of employees\n# which can be done using a list command\nempList = list(empId, empName, numberOfEmp)\n\nempList\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n\n[[3]]\n[1] 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(empList)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n# Arrays\n\n3D arrays\n\n::: {.cell}\n\n```{.r .cell-code}\nA = array(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8),\n\n    # Creating two rectangular matrices \n    # each with two rows and two columns\n    dim = c(2, 2, 2)                        \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"array\"\n```\n\n\n:::\n:::\n\n\n# Reference:\n\nhttps://www.geeksforgeeks.org/data-structures-in-r-programming/\n",
=======
    "markdown": "---\ntitle: \"Data structure in R\"\n\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n\n\n![](images/download.jpg){width=\"600\"}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n\n\n\n\n# vector\n\nA vector is an ordered collection of basic data types of a given length. The only key thing here is all the elements of a vector must be same data type e.g homogeneous data structures. Vectors are one-dimensional data structures.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na = c(1, 2, 3, 4)\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nb =  c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\nb\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n\n## create sequence vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 2, to = 14, by = 2) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  2  4  6  8 10 12 14\n```\n\n\n:::\n:::\n\n\n\n\n## create repeat vector\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(x = 1.5, times = 4)  \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1.5 1.5 1.5 1.5\n```\n\n\n:::\n:::\n\n\n\n\n## create random vector\n\ncreate 5 random number from 1 to 10 without replacement\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10,5, replace=F) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6  8  9 10  2\n```\n\n\n:::\n:::\n\n\n\n\ncreate 5 random number from 1 to 10 with replacement\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample(1:10,5, replace=T) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5 4 8 4 1\n```\n\n\n:::\n:::\n\n\n\n\n\ncreate 1 random number from 0 to 1 from random uniform distribution\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrunif(1, min=0, max=1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.9448019\n```\n\n\n:::\n:::\n\n\n\n\ngenerate 4 random number that follows the normal distribution with mean being 0 and standard deviation being 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsn1 <- rnorm(4, mean=0, sd=1) # standard nromal\nsn1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.07484166  1.07761998  1.90462714 -0.59025621\n```\n\n\n:::\n:::\n\n\n\n\n## create unique vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1=c(1,1,2,2,5,6)\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 1 2 2 5 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 5 6\n```\n\n\n:::\n:::\n\n\n\n\n\n## append vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3)\ny=c(4,5,6)\nz=c(x,y)\nz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5 6\n```\n\n\n:::\n:::\n\n\n\n\n## remove element in vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,4,5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n### remove first one\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3 4 5\n```\n\n\n:::\n:::\n\n\n\n\n\n### remove last one\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-length(x)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n\n\n\n\n### remove from last second\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1:(length(x)-2)]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n\n### remove from from another vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nremove=c(2,4)\nx[-remove]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5\n```\n\n\n:::\n:::\n\n\n\n\n\n## sort vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\na=c(2,4,6,1,4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 4 4 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsort(a,decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 4 4 2 1\n```\n\n\n:::\n:::\n\n\n\n\n## vector length\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5\n```\n\n\n:::\n:::\n\n\n\n\n\n## calculate vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,4,5)\n\nsum(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n\n\n\n\n## select vector element\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx=c(1,2,3,6,9,10)\n```\n:::\n\n\n\n\n\n### select first\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\nor \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n\n\n\n\n### select last\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% last()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\nor\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(-1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 10\n```\n\n\n:::\n:::\n\n\n\n\n### select second last\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx %>% nth(-2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 9\n```\n\n\n:::\n:::\n\n\n\n\n### select first to 3th\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[1:3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n\n### select last one to last 3th\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx[-3:-1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  6  9 10\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## compare two vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxx=c(1,2,3,4)\nxx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nyy=c(2,4)\nyy\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 4\n```\n\n\n:::\n:::\n\n\n\n\nfind number only in xx not in yy\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetdiff(xx, yy)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n## vector  Converting between types\n\n\n### to factor\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(\"a\", \"g\", \"b\")\ny=as.factor(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a g b\nLevels: a b g\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### to numeric\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c('123','44', '222')\ny=as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 123  44 222\n```\n\n\n:::\n:::\n\n\n\n\n\n### to character\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(123123,111,5555)\ny=as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"123123\" \"111\"    \"5555\"  \n```\n\n\n:::\n:::\n\n\n\n\n### to boolen\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(1,0,1)\ny=as.logical(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## vector to other data format\n\n\n### vector to dataframe\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nName <- c(\"Jhon\", \"Lee\", \"Suzan\", \"Abhinav\", \n          \"Brain\", \"Emma\", \"David\", \"Alice\") \n\n   \nMarks <- c(56, 76, 86, 96, 73, 87, 47, 98) \n    \n\ndata<- data.frame(Name,Marks) \ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name Marks\n1    Jhon    56\n2     Lee    76\n3   Suzan    86\n4 Abhinav    96\n5   Brain    73\n6    Emma    87\n7   David    47\n8   Alice    98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\n### verctor to matrix\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- c(56, 76, 86, 96, 73, 87, 47, 98) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-matrix(v1,nrow=4)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   56   73\n[2,]   76   87\n[3,]   86   47\n[4,]   96   98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n\n\n\nother way:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata<-matrix(c(v1,v1),ncol = 2)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,]   56   56\n[2,]   76   76\n[3,]   86   86\n[4,]   96   96\n[5,]   73   73\n[6,]   87   87\n[7,]   47   47\n[8,]   98   98\n```\n\n\n:::\n:::\n\n\n\n\n\n### verctor to list\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=list(v1)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 56 76 86 96 73 87 47 98\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n\neach element in vetor as a element in list\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=as.list(v1)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 56\n\n[[2]]\n[1] 76\n\n[[3]]\n[1] 86\n\n[[4]]\n[1] 96\n\n[[5]]\n[1] 73\n\n[[6]]\n[1] 87\n\n[[7]]\n[1] 47\n\n[[8]]\n[1] 98\n```\n\n\n:::\n:::\n\n\n\n### verctor to array\n\n3D array\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec1=c(1:5) \n \nvec2=c(6:10) \n \narr=array(c(vec1,vec2),dim=c(2,5,3)) \n \n# printing the array\nclass(arr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"array\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\narr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 2\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n\n, , 3\n\n     [,1] [,2] [,3] [,4] [,5]\n[1,]    1    3    5    7    9\n[2,]    2    4    6    8   10\n```\n\n\n:::\n:::\n\n\n\n\n# Dataframe\n\nDataframes are generic data objects of R which are used to store the tabular data. Dataframes are the foremost popular data objects in R programming because we are comfortable in seeing the data within the tabular form. They are two-dimensional, heterogeneous data structures\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# A vector which is a character vector\nName = c(\"Amiya\", \"Raj\", \"Asish\")\n\n# A vector which is a character vector\nLanguage = c(\"R\", \"Python\", \"Java\")\n\n# A vector which is a numeric vector\nAge = c(22, 25, 45)\n\n# To create dataframe use data.frame command\n# and then pass each of the vectors \n# we have created as arguments\n# to the function data.frame()\ndf = data.frame(Name, Language, Age)\n\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Name Language Age\n1 Amiya        R  22\n2   Raj   Python  25\n3 Asish     Java  45\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n\n\n\n## dataframe to other data format\n\n\n### dataframe to matrix\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- as.matrix(df)\n\nclass(mat)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Name    Language Age \n[1,] \"Amiya\" \"R\"      \"22\"\n[2,] \"Raj\"   \"Python\" \"25\"\n[3,] \"Asish\" \"Java\"   \"45\"\n```\n\n\n:::\n:::\n\n\n\n\n### dataframe to vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec=df[['Name']]\n\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Amiya\" \"Raj\"   \"Asish\"\n```\n\n\n:::\n:::\n\n\n\n\n### dataframe to list\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist=as.list(df[['Name']])\n\nclass(list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"Amiya\"\n\n[[2]]\n[1] \"Raj\"\n\n[[3]]\n[1] \"Asish\"\n```\n\n\n:::\n:::\n\n\n\n\n# Matrices\n\nA matrix is a rectangular arrangement of numbers in rows and columns. In a matrix, as we know rows are the ones that run horizontally and columns are the ones that run vertically. Matrices are two-dimensional, homogeneous data structures.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = matrix(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8, 9), \n    \n    # No of rows and columns\n    nrow = 3, ncol = 3,  \n\n    # By default matrices are \n    # in column-wise order \n    # So this parameter decides\n    # how to arrange the matrix          \n    byrow = TRUE                             \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix002=A+A\n\nmatrix002\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    2    4    6\n[2,]    8   10   12\n[3,]   14   16   18\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix003=A*A\n\nmatrix003\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2] [,3]\n[1,]    1    4    9\n[2,]   16   25   36\n[3,]   49   64   81\n```\n\n\n:::\n:::\n\n\n\n\n## matrix to other data format\n\n\n### matrix to dataframe\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- as.data.frame(matrix003)\n\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  V1 V2 V3\n1  1  4  9\n2 16 25 36\n3 49 64 81\n```\n\n\n:::\n:::\n\n\n\n\n### matrix to vector\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvec=as.vector(matrix003)\n\nclass(vec)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nvec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  1 16 49  4 25 64  9 36 81\n```\n\n\n:::\n:::\n\n\n\n\n\n### matrix to list\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist=as.list(matrix003)\n\nclass(list)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlist\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1\n\n[[2]]\n[1] 16\n\n[[3]]\n[1] 49\n\n[[4]]\n[1] 4\n\n[[5]]\n[1] 25\n\n[[6]]\n[1] 64\n\n[[7]]\n[1] 9\n\n[[8]]\n[1] 36\n\n[[9]]\n[1] 81\n```\n\n\n:::\n:::\n\n\n\n\n# Lists\n\nA list is a generic object consisting of an ordered collection of objects. Lists are heterogeneous data structures. These are also one-dimensional data structures. A list can be a list of vectors, list of matrices, a list of characters and a list of functions and so on.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nempId = c(1, 2, 3, 4)\n\n# The second attribute is the employee name \n# which is created using this line of code here\n# which is the character vector \nempName = c(\"Debi\", \"Sandeep\", \"Subham\", \"Shiba\")\n\n# The third attribute is the number of employees\n# which is a single numeric variable.\nnumberOfEmp = 4\n\n# We can combine all these three different\n# data types into a list\n# containing the details of employees\n# which can be done using a list command\nempList = list(empId, empName, numberOfEmp)\n\nempList\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] 1 2 3 4\n\n[[2]]\n[1] \"Debi\"    \"Sandeep\" \"Subham\"  \"Shiba\"  \n\n[[3]]\n[1] 4\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(empList)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n\n\n# Arrays\n\n3D arrays\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nA = array(\n    # Taking sequence of elements\n    c(1, 2, 3, 4, 5, 6, 7, 8),\n\n    # Creating two rectangular matrices \n    # each with two rows and two columns\n    dim = c(2, 2, 2)                        \n)\n\nA\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n, , 1\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n, , 2\n\n     [,1] [,2]\n[1,]    5    7\n[2,]    6    8\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(A)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"array\"\n```\n\n\n:::\n:::\n\n\n\n\n\n# Reference:\n\nhttps://www.geeksforgeeks.org/data-structures-in-r-programming/\n",
>>>>>>> 034811f3eac1a90f3f85df84c1be595d29b7f8d6
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}