{
  "hash": "8ab3458099b74518b6362d605813bfbf",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data manipulation with tidyverse\"\n\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\nThe tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures.\n\n![](images/ggplot_hive.jpg){width=\"600\"}\n\ndplyr is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges.\n\n![](images/logo.png){width=\"231\"}\n\n# load package\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npackageVersion(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] '1.1.4'\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata(mtcars)\nsmall_mtcars = mtcars %>% select(cyl, mpg,hp) %>% head()\n```\n:::\n\nmake rowname into one column\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tibble)\nsmall_mtcars=rownames_to_column(small_mtcars, var=\"car_name\")\n\nsmall_mtcars %>% head\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1         Mazda RX4   6 21.0 110\n2     Mazda RX4 Wag   6 21.0 110\n3        Datsun 710   4 22.8  93\n4    Hornet 4 Drive   6 21.4 110\n5 Hornet Sportabout   8 18.7 175\n6           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n# Data manipulation\n\n## select column\n\n## get column names\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(small_mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car_name\" \"cyl\"      \"mpg\"      \"hp\"      \n```\n\n\n:::\n:::\n\n## select by name\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% select(cyl, mpg,hp) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    cyl  mpg  hp\nMazda RX4             6 21.0 110\nMazda RX4 Wag         6 21.0 110\nDatsun 710            4 22.8  93\nHornet 4 Drive        6 21.4 110\nHornet Sportabout     8 18.7 175\nValiant               6 18.1 105\nDuster 360            8 14.3 245\nMerc 240D             4 24.4  62\nMerc 230              4 22.8  95\nMerc 280              6 19.2 123\nMerc 280C             6 17.8 123\nMerc 450SE            8 16.4 180\nMerc 450SL            8 17.3 180\nMerc 450SLC           8 15.2 180\nCadillac Fleetwood    8 10.4 205\nLincoln Continental   8 10.4 215\nChrysler Imperial     8 14.7 230\nFiat 128              4 32.4  66\nHonda Civic           4 30.4  52\nToyota Corolla        4 33.9  65\nToyota Corona         4 21.5  97\nDodge Challenger      8 15.5 150\nAMC Javelin           8 15.2 150\nCamaro Z28            8 13.3 245\nPontiac Firebird      8 19.2 175\nFiat X1-9             4 27.3  66\nPorsche 914-2         4 26.0  91\nLotus Europa          4 30.4 113\nFord Pantera L        8 15.8 264\nFerrari Dino          6 19.7 175\nMaserati Bora         8 15.0 335\nVolvo 142E            4 21.4 109\n```\n\n\n:::\n:::\n\n## select columns by name match with 'p'\n\n## select columns by index\n\n### select first and 3rd columns\n\n### select first to 3rd columns\n\n## drop column\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% select(-cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name  mpg  hp\n1         Mazda RX4 21.0 110\n2     Mazda RX4 Wag 21.0 110\n3        Datsun 710 22.8  93\n4    Hornet 4 Drive 21.4 110\n5 Hornet Sportabout 18.7 175\n6           Valiant 18.1 105\n```\n\n\n:::\n:::\n\n## Renaming column\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%rename(new_cyl=cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name new_cyl  mpg  hp\n1         Mazda RX4       6 21.0 110\n2     Mazda RX4 Wag       6 21.0 110\n3        Datsun 710       4 22.8  93\n4    Hornet 4 Drive       6 21.4 110\n5 Hornet Sportabout       8 18.7 175\n6           Valiant       6 18.1 105\n```\n\n\n:::\n:::\n\n## Create column\n\n### Mutate\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%mutate(new_cyl=cyl+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp new_cyl\n1         Mazda RX4   6 21.0 110       7\n2     Mazda RX4 Wag   6 21.0 110       7\n3        Datsun 710   4 22.8  93       5\n4    Hornet 4 Drive   6 21.4 110       7\n5 Hornet Sportabout   8 18.7 175       9\n6           Valiant   6 18.1 105       7\n```\n\n\n:::\n:::\n\n### if else\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%mutate(new_cly_group=if_else(cyl>6,'big','small'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp new_cly_group\n1         Mazda RX4   6 21.0 110         small\n2     Mazda RX4 Wag   6 21.0 110         small\n3        Datsun 710   4 22.8  93         small\n4    Hornet 4 Drive   6 21.4 110         small\n5 Hornet Sportabout   8 18.7 175           big\n6           Valiant   6 18.1 105         small\n```\n\n\n:::\n:::\n\n### case when\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%mutate(cly_group=case_when(\n    cyl > 6 ~ \"very big\",\n    cyl > 4 ~ \"big\",\n    TRUE ~ \"other\",\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp cly_group\n1         Mazda RX4   6 21.0 110       big\n2     Mazda RX4 Wag   6 21.0 110       big\n3        Datsun 710   4 22.8  93     other\n4    Hornet 4 Drive   6 21.4 110       big\n5 Hornet Sportabout   8 18.7 175  very big\n6           Valiant   6 18.1 105       big\n```\n\n\n:::\n:::\n\n### Transmute,create column and only keep this column\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%transmute(new_cyl=cyl+1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  new_cyl\n1       7\n2       7\n3       5\n4       7\n5       9\n6       7\n```\n\n\n:::\n:::\n\n## Filter rows\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%filter(cyl>5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1         Mazda RX4   6 21.0 110\n2     Mazda RX4 Wag   6 21.0 110\n3    Hornet 4 Drive   6 21.4 110\n4 Hornet Sportabout   8 18.7 175\n5           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n### Filters with AND conditions\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%filter(cyl>5,mpg>20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        car_name cyl  mpg  hp\n1      Mazda RX4   6 21.0 110\n2  Mazda RX4 Wag   6 21.0 110\n3 Hornet 4 Drive   6 21.4 110\n```\n\n\n:::\n:::\n\n### Filters with OR conditions\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%filter(cyl>5|mpg>20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1         Mazda RX4   6 21.0 110\n2     Mazda RX4 Wag   6 21.0 110\n3        Datsun 710   4 22.8  93\n4    Hornet 4 Drive   6 21.4 110\n5 Hornet Sportabout   8 18.7 175\n6           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n### filter row with index\n\n#### 5th rows\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% slice(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1 Hornet Sportabout   8 18.7 175\n```\n\n\n:::\n:::\n\n#### 1 and 5h rows\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1         Mazda RX4   6 21.0 110\n2     Mazda RX4 Wag   6 21.0 110\n3        Datsun 710   4 22.8  93\n4    Hornet 4 Drive   6 21.4 110\n5 Hornet Sportabout   8 18.7 175\n```\n\n\n:::\n:::\n\n#### get ramdon 5 rows\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% sample_n(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1    Hornet 4 Drive   6 21.4 110\n2         Mazda RX4   6 21.0 110\n3 Hornet Sportabout   8 18.7 175\n4        Datsun 710   4 22.8  93\n5           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n## Append\n\n### append by row\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% rbind(small_mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            car_name cyl  mpg  hp\n1          Mazda RX4   6 21.0 110\n2      Mazda RX4 Wag   6 21.0 110\n3         Datsun 710   4 22.8  93\n4     Hornet 4 Drive   6 21.4 110\n5  Hornet Sportabout   8 18.7 175\n6            Valiant   6 18.1 105\n7          Mazda RX4   6 21.0 110\n8      Mazda RX4 Wag   6 21.0 110\n9         Datsun 710   4 22.8  93\n10    Hornet 4 Drive   6 21.4 110\n11 Hornet Sportabout   8 18.7 175\n12           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n### append by column\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>% cbind(small_mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp          car_name cyl  mpg  hp\n1         Mazda RX4   6 21.0 110         Mazda RX4   6 21.0 110\n2     Mazda RX4 Wag   6 21.0 110     Mazda RX4 Wag   6 21.0 110\n3        Datsun 710   4 22.8  93        Datsun 710   4 22.8  93\n4    Hornet 4 Drive   6 21.4 110    Hornet 4 Drive   6 21.4 110\n5 Hornet Sportabout   8 18.7 175 Hornet Sportabout   8 18.7 175\n6           Valiant   6 18.1 105           Valiant   6 18.1 105\n```\n\n\n:::\n:::\n\n### Sepcial vales\n\n#### NAN\n\nNaN (“Not a Number”) means 0/0\n\n::: {.cell}\n\n```{.r .cell-code}\nv1 <- NaN\nv1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NaN\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(v1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n\n#### NA\n\nNA (“Not Available”) is generally interpreted as a missing value\n\n::: {.cell}\n\n```{.r .cell-code}\nv2 <- NA\nv2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(v2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n:::\n\n\n#### NULL\n\nNULL is an object and is returned when an expression or function results in an undefined value. In R language, NULL (capital letters) is a reserved word\n\n::: {.cell}\n\n```{.r .cell-code}\nv3=NULL\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nNULL\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(v3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nlogical(0)\n```\n\n\n:::\n:::\n\n\n## group by\n\n### average,min,max,sum\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%group_by(cyl) %>% summarise(avg_mpg=mean(mpg)\n                                            ,min_mpg=min(mpg)\n                                            ,max_mpg=max(mpg)\n                                            ,sum_mpg=sum(mpg))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 5\n    cyl avg_mpg min_mpg max_mpg sum_mpg\n  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n1     4    22.8    22.8    22.8    22.8\n2     6    20.4    18.1    21.4    81.5\n3     8    18.7    18.7    18.7    18.7\n```\n\n\n:::\n:::\n\n### count record and count distinct record\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%group_by(cyl) %>% summarise(n_mpg=n()\n                                            ,distinct_n_mpg=n_distinct(mpg)\n                                            \n                                            )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n    cyl n_mpg distinct_n_mpg\n  <dbl> <int>          <int>\n1     4     1              1\n2     6     4              3\n3     8     1              1\n```\n\n\n:::\n:::\n\n## order rows\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%arrange(cyl) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1        Datsun 710   4 22.8  93\n2         Mazda RX4   6 21.0 110\n3     Mazda RX4 Wag   6 21.0 110\n4    Hornet 4 Drive   6 21.4 110\n5           Valiant   6 18.1 105\n6 Hornet Sportabout   8 18.7 175\n```\n\n\n:::\n:::\n\n### Sort in descending order\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%arrange(desc(cyl) )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1 Hornet Sportabout   8 18.7 175\n2         Mazda RX4   6 21.0 110\n3     Mazda RX4 Wag   6 21.0 110\n4    Hornet 4 Drive   6 21.4 110\n5           Valiant   6 18.1 105\n6        Datsun 710   4 22.8  93\n```\n\n\n:::\n:::\n\n### Arrange by multiple variables\n\n::: {.cell}\n\n```{.r .cell-code}\nsmall_mtcars %>%arrange(cyl,mpg)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           car_name cyl  mpg  hp\n1        Datsun 710   4 22.8  93\n2           Valiant   6 18.1 105\n3         Mazda RX4   6 21.0 110\n4     Mazda RX4 Wag   6 21.0 110\n5    Hornet 4 Drive   6 21.4 110\n6 Hornet Sportabout   8 18.7 175\n```\n\n\n:::\n:::\n\n## join\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_data=small_mtcars %>% slice(1:2)\nright_data=small_mtcars %>% slice(2:4)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       car_name cyl mpg  hp\n1     Mazda RX4   6  21 110\n2 Mazda RX4 Wag   6  21 110\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nright_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        car_name cyl  mpg  hp\n1  Mazda RX4 Wag   6 21.0 110\n2     Datsun 710   4 22.8  93\n3 Hornet 4 Drive   6 21.4 110\n```\n\n\n:::\n:::\n\n### inner_join\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=left_data %>% inner_join(right_data,join_by(car_name== car_name), suffix = c(\"_l\", \"._r\"))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       car_name cyl_l mpg_l hp_l cyl._r mpg._r hp._r\n1 Mazda RX4 Wag     6    21  110      6     21   110\n```\n\n\n:::\n:::\n\n### left join\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=left_data %>% left_join(right_data,join_by(car_name== car_name), suffix = c(\"_l\", \"._r\"))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       car_name cyl_l mpg_l hp_l cyl._r mpg._r hp._r\n1     Mazda RX4     6    21  110     NA     NA    NA\n2 Mazda RX4 Wag     6    21  110      6     21   110\n```\n\n\n:::\n:::\n\n### full join\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=left_data %>% full_join(right_data,join_by(car_name== car_name), suffix = c(\"_l\", \"._r\"))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n        car_name cyl_l mpg_l hp_l cyl._r mpg._r hp._r\n1      Mazda RX4     6    21  110     NA     NA    NA\n2  Mazda RX4 Wag     6    21  110      6   21.0   110\n3     Datsun 710    NA    NA   NA      4   22.8    93\n4 Hornet 4 Drive    NA    NA   NA      6   21.4   110\n```\n\n\n:::\n:::\n\n### anti join\n\nanti_join() return all rows from x without a match in y\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=left_data %>% anti_join(right_data,join_by(car_name== car_name))\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   car_name cyl mpg  hp\n1 Mazda RX4   6  21 110\n```\n\n\n:::\n:::\n\n## Reshape tables\n\n::: {.cell}\n\n```{.r .cell-code}\nolddata_wide <- read.table(header=TRUE, text='\n subject sex control cond1 cond2\n       1   M     7.9  12.3  10.7\n       2   F     6.3  10.6  11.1\n       3   F     9.5  13.1  13.8\n       4   M    11.5  13.4  12.9\n')\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nolddata_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  subject sex control cond1 cond2\n1       1   M     7.9  12.3  10.7\n2       2   F     6.3  10.6  11.1\n3       3   F     9.5  13.1  13.8\n4       4   M    11.5  13.4  12.9\n```\n\n\n:::\n:::\n\n### Gather data long(wide to long)\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_long=olddata_wide %>%\n  pivot_longer(!c(subject,sex), names_to = 'income', values_to = 'DATA')\n\ndata_long\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 4\n   subject sex   income   DATA\n     <int> <chr> <chr>   <dbl>\n 1       1 M     control   7.9\n 2       1 M     cond1    12.3\n 3       1 M     cond2    10.7\n 4       2 F     control   6.3\n 5       2 F     cond1    10.6\n 6       2 F     cond2    11.1\n 7       3 F     control   9.5\n 8       3 F     cond1    13.1\n 9       3 F     cond2    13.8\n10       4 M     control  11.5\n11       4 M     cond1    13.4\n12       4 M     cond2    12.9\n```\n\n\n:::\n:::\n\n### Spread data wide (long to wide)\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_wide=data_long %>%\n  pivot_wider(names_from = income, values_from = DATA)\n\ndata_wide\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 5\n  subject sex   control cond1 cond2\n    <int> <chr>   <dbl> <dbl> <dbl>\n1       1 M         7.9  12.3  10.7\n2       2 F         6.3  10.6  11.1\n3       3 F         9.5  13.1  13.8\n4       4 M        11.5  13.4  12.9\n```\n\n\n:::\n:::\n\n# string\n\nstringr is built on top of stringi, which uses the ICU C library to provide fast, correct implementations of common string manipulations.\n\n![](images/logo-01.png)\n\n## length\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"I like horses.\"\nstr_length(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 14\n```\n\n\n:::\n:::\n\n## upper case\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"I like horses.\"\n\nstr_to_upper(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"I LIKE HORSES.\"\n```\n\n\n:::\n:::\n\n## lower case\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- \"I like horses.\"\n\nstr_to_lower(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"i like horses.\"\n```\n\n\n:::\n:::\n\n## match\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list=c('abc','bbc','appale','bbaa','cc')\n```\n:::\n\n### match with 'a'\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list %>% str_detect('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE  TRUE  TRUE FALSE\n```\n\n\n:::\n:::\n\n### match with 'a' count\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list %>% str_count('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0 2 2 0\n```\n\n\n:::\n:::\n\n### index of vector match\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list %>% str_which('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 4\n```\n\n\n:::\n:::\n\n### index of each word match (first match)\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list %>% str_locate('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     start end\n[1,]     1   1\n[2,]    NA  NA\n[3,]     1   1\n[4,]     3   3\n[5,]    NA  NA\n```\n\n\n:::\n:::\n\n### index of each word match (all match)\n\n::: {.cell}\n\n```{.r .cell-code}\nword_list %>% str_locate_all('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n     start end\n[1,]     1   1\n\n[[2]]\n     start end\n\n[[3]]\n     start end\n[1,]     1   1\n[2,]     4   4\n\n[[4]]\n     start end\n[1,]     3   3\n[2,]     4   4\n\n[[5]]\n     start end\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993'\n\nnum=str_match(trx, \"(\\\\d)+\")\n\nnum\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1]   [,2]\n[1,] \"1993\" \"3\" \n```\n\n\n:::\n:::\n\n## concatenation\n\n::: {.cell}\n\n```{.r .cell-code}\na='aaaa'\nb='bbbb'\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npaste(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aaaa bbbb\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npaste0(a,b)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aaaabbbb\"\n```\n\n\n:::\n:::\n\n## replace string\n\n### str_replace()\n\n::: {.cell}\n\n```{.r .cell-code}\ntext001=\"abcb\"\ntext001 %>% str_replace('b','1')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a1cb\"\n```\n\n\n:::\n:::\n\n### str_replace_all()\n\n::: {.cell}\n\n```{.r .cell-code}\ntext001=\"abcb\"\ntext001 %>% str_replace_all('b','1')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a1c1\"\n```\n\n\n:::\n:::\n\n### replace with regular expression\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword2=c('a-b','M6D5','M6D54','M6D55','M6D5') %>% as_tibble()\nword2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  value\n  <chr>\n1 a-b  \n2 M6D5 \n3 M6D54\n4 M6D55\n5 M6D5 \n```\n\n\n:::\n:::\nreplace D+all number with '_'\n::: {.cell}\n\n```{.r .cell-code}\nword2 %>% mutate(new=value %>% str_replace_all('D\\\\d*','_'))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value new  \n  <chr> <chr>\n1 a-b   a-b  \n2 M6D5  M6_  \n3 M6D54 M6_  \n4 M6D55 M6_  \n5 M6D5  M6_  \n```\n\n\n:::\n:::\n\n\n\n## split string\n\n::: {.cell}\n\n```{.r .cell-code}\nword=c('a-b','1-c','c-c')\n\ndf_word=word %>% as.data.frame() %>% rename('word'='.')\n```\n:::\n\n### make 2 coloumn and split by `-` using stringr package\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_word\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  word\n1  a-b\n2  1-c\n3  c-c\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\ndf_word$word %>% str_split_fixed('-',2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     [,1] [,2]\n[1,] \"a\"  \"b\" \n[2,] \"1\"  \"c\" \n[3,] \"c\"  \"c\" \n```\n\n\n:::\n:::\n\n### make 2 coloumn and split by `-` using tidyr package\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_word\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  word\n1  a-b\n2  1-c\n3  c-c\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\ndf_word %>% separate(word,c('col1','col2'),'-')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  col1 col2\n1    a    b\n2    1    c\n3    c    c\n```\n\n\n:::\n:::\n\n## subset element in list\n\n::: {.cell}\n\n```{.r .cell-code}\nword=c('aabbbasdf','apple','pet','melon')\n```\n:::\n\n### word with 'a'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>% str_subset('a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aabbbasdf\" \"apple\"    \n```\n\n\n:::\n:::\n\n### word with 'a,e,i,o,u'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>% str_subset(\"[aeiou]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aabbbasdf\" \"apple\"     \"pet\"       \"melon\"    \n```\n\n\n:::\n:::\n\n### word with 'pet' or 'melon'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>% str_subset('pet|melon')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"pet\"   \"melon\"\n```\n\n\n:::\n:::\n\n### word with 'pet' or 'melon'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>% str_subset('aa')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"aabbbasdf\"\n```\n\n\n:::\n:::\n\n## extract string\n\n::: {.cell}\n\n```{.r .cell-code}\ndata001=mtcars\ndata001 <- cbind(names = rownames(data001), data001)\n```\n:::\n\n### by postion\n\nextract 2 to 4\n\n::: {.cell}\n\n```{.r .cell-code}\ndata001$new_names=data001$names %>% str_sub(2,4)\nhead(data001 %>% select(new_names,names))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                  new_names             names\nMazda RX4               azd         Mazda RX4\nMazda RX4 Wag           azd     Mazda RX4 Wag\nDatsun 710              ats        Datsun 710\nHornet 4 Drive          orn    Hornet 4 Drive\nHornet Sportabout       orn Hornet Sportabout\nValiant                 ali           Valiant\n```\n\n\n:::\n:::\n\n### extracting with Regular expressions\n\nextracting one letter\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract(\"\\\\w\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"\n```\n\n\n:::\n:::\n\nextracting one letter/number\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract(\".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"\n```\n\n\n:::\n:::\n\nextracting one .\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993.ccc'\ntrx %>% str_extract(\"\\\\.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \".\"\n```\n\n\n:::\n:::\n\nextracting 3 letter start with 'a'\n\n::: {.cell}\n\n```{.r .cell-code}\nword=c('aabbbasdfe. e','appl.e e','pet','melon','asdf g 133asd') %>% as_tibble()\nword\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 1\n  value        \n  <chr>        \n1 aabbbasdfe. e\n2 appl.e e     \n3 pet          \n4 melon        \n5 asdf g 133asd\n```\n\n\n:::\n:::\n\nextracting 2 letter start with 'a'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\"a..\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value         new  \n  <chr>         <chr>\n1 aabbbasdfe. e aab  \n2 appl.e e      app  \n3 pet           <NA> \n4 melon         <NA> \n5 asdf g 133asd asd  \n```\n\n\n:::\n:::\n\nextracting all letter start with 'a'\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\"a.+\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value         new          \n  <chr>         <chr>        \n1 aabbbasdfe. e aabbbasdfe. e\n2 appl.e e      appl.e e     \n3 pet           <NA>         \n4 melon         <NA>         \n5 asdf g 133asd asdf g 133asd\n```\n\n\n:::\n:::\n\nextracting all letter between 'a' and 'e'\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\"(a).*?(e)\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value         new       \n  <chr>         <chr>     \n1 aabbbasdfe. e aabbbasdfe\n2 appl.e e      appl.e    \n3 pet           <NA>      \n4 melon         <NA>      \n5 asdf g 133asd <NA>      \n```\n\n\n:::\n:::\n\n\nextracting all letter between 'a' and '.'\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\"(a).*?(\\\\.)\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value         new        \n  <chr>         <chr>      \n1 aabbbasdfe. e aabbbasdfe.\n2 appl.e e      appl.      \n3 pet           <NA>       \n4 melon         <NA>       \n5 asdf g 133asd <NA>       \n```\n\n\n:::\n:::\n\nextracting all letter between 'a' and space\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\"(a).*?( )\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  value         new           \n  <chr>         <chr>         \n1 aabbbasdfe. e \"aabbbasdfe. \"\n2 appl.e e      \"appl.e \"     \n3 pet            <NA>         \n4 melon          <NA>         \n5 asdf g 133asd \"asdf \"       \n```\n\n\n:::\n:::\n\nextracting all letter end with number\n\n::: {.cell}\n\n```{.r .cell-code}\nword %>%mutate(new=value %>% str_extract(\".*?\\\\d\")\n               , new2=new %>% str_sub(end=-3)\n                                         \n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  value         new      new2  \n  <chr>         <chr>    <chr> \n1 aabbbasdfe. e <NA>     <NA>  \n2 appl.e e      <NA>     <NA>  \n3 pet           <NA>     <NA>  \n4 melon         <NA>     <NA>  \n5 asdf g 133asd asdf g 1 asdf g\n```\n\n\n:::\n:::\n\n\nextracting one number\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract(\"\\\\d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\"\n```\n\n\n:::\n:::\n\nextracting more number\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract(\"(\\\\d)+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1993\"\n```\n\n\n:::\n:::\n\nextracting more non number\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract_all(\"\\\\D+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n[1] \"abc\"  \" ccc\"\n```\n\n\n:::\n:::\n\n\nextracting all letter from the begining\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx='abc1993 ccc'\ntrx %>% str_extract(\"[:alpha:]+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"abc\"\n```\n\n\n:::\n:::\n\nextracting number after `points:`\n\n::: {.cell}\n\n```{.r .cell-code}\ntrx=c('abcpoints:100 ccc','asdfasd','points:66','thisis points:6')\ntrx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"abcpoints:100 ccc\" \"asdfasd\"           \"points:66\"        \n[4] \"thisis points:6\"  \n```\n\n\n:::\n:::\n\nextracting number after `points:` and remove non match\n\n::: {.cell}\n\n```{.r .cell-code}\nt=trx %>% str_extract(\"points:[:digit:]+\") %>% na.omit()%>% str_extract(\"points:[:digit:]+\")\nt\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"points:100\" \"points:66\"  \"points:6\"  \n```\n\n\n:::\n:::\n\n\n## Regular expressions\n\n::: {.cell}\n\n```{.r .cell-code}\nphones=c('abba','124','anna')\nphones\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"abba\" \"124\"  \"anna\"\n```\n\n\n:::\n:::\n\n### get a+ (b or n) + (b or n) + a\n::: {.cell}\n\n```{.r .cell-code}\nphones %>% str_view('a[bn][bn]a')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <abba>\n[3] │ <anna>\n```\n\n\n:::\n:::\n\n### bb or nn\n::: {.cell}\n\n```{.r .cell-code}\nphones %>% str_view('(bb|nn)')\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ a<bb>a\n[3] │ a<nn>a\n```\n\n\n:::\n:::\n\n\n# date\n\nusing lubridate package to handle date and time in R\n\n![](images/logo-02.png)\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(nycflights13)\n```\n:::\n\n## date format\n\ninput as character\n\n::: {.cell}\n\n```{.r .cell-code}\ndate1='2023-01-01'\nclass(date1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndate1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-01-01\"\n```\n\n\n:::\n:::\n\nconvert into date type with `as.Date()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndate2=as.Date('2023-01-01')\nclass(date2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndate2\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-01-01\"\n```\n\n\n:::\n:::\n\nconvert into date type with `ymd()`\n\n::: {.cell}\n\n```{.r .cell-code}\ndate3=ymd('2023-01-01')\nclass(date3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndate3\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2023-01-01\"\n```\n\n\n:::\n:::\n\nget today with `today()`\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-17\"\n```\n\n\n:::\n:::\n\nget local timezone\n\n::: {.cell}\n\n```{.r .cell-code}\nSys.timezone()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Asia/Shanghai\"\n```\n\n\n:::\n:::\n\n## change date format\n\nmake multiple column character to date with `make_date()`\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(year, month, day, hour, minute) %>% \n  mutate(departure = make_date(year, month, day))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day  hour minute departure \n   <int> <int> <int> <dbl>  <dbl> <date>    \n 1  2013     1     1     5     15 2013-01-01\n 2  2013     1     1     5     29 2013-01-01\n 3  2013     1     1     5     40 2013-01-01\n 4  2013     1     1     5     45 2013-01-01\n 5  2013     1     1     6      0 2013-01-01\n 6  2013     1     1     5     58 2013-01-01\n 7  2013     1     1     6      0 2013-01-01\n 8  2013     1     1     6      0 2013-01-01\n 9  2013     1     1     6      0 2013-01-01\n10  2013     1     1     6      0 2013-01-01\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(year, month, day, hour, minute) %>% \n  mutate(departure = make_datetime(year, month, day, hour, minute))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 6\n    year month   day  hour minute departure          \n   <int> <int> <int> <dbl>  <dbl> <dttm>             \n 1  2013     1     1     5     15 2013-01-01 05:15:00\n 2  2013     1     1     5     29 2013-01-01 05:29:00\n 3  2013     1     1     5     40 2013-01-01 05:40:00\n 4  2013     1     1     5     45 2013-01-01 05:45:00\n 5  2013     1     1     6      0 2013-01-01 06:00:00\n 6  2013     1     1     5     58 2013-01-01 05:58:00\n 7  2013     1     1     6      0 2013-01-01 06:00:00\n 8  2013     1     1     6      0 2013-01-01 06:00:00\n 9  2013     1     1     6      0 2013-01-01 06:00:00\n10  2013     1     1     6      0 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n```\n\n\n:::\n:::\n\n## day differnce between two dates\n\n::: {.cell}\n\n```{.r .cell-code}\nday1=ymd('2022-01-01')\nday2=ymd('2023-02-03')\n\ndiff=day2-day1\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiff\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 398 days\n```\n\n\n:::\n:::\n\nusing `interval()` find two dates gap\n\n::: {.cell}\n\n```{.r .cell-code}\ninterval(day1,day2) %>% as.period()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1y 1m 2d 0H 0M 0S\"\n```\n\n\n:::\n:::\n\nfind day gap\n\n::: {.cell}\n\n```{.r .cell-code}\ninterval(day1,day2)%/% days(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 398\n```\n\n\n:::\n:::\n\nfind month gap\n\n::: {.cell}\n\n```{.r .cell-code}\ninterval(day1,day2)%/% months(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 13\n```\n\n\n:::\n:::\n\nfind year gap\n\n::: {.cell}\n\n```{.r .cell-code}\ninterval(day1,day2)%/% years(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1\n```\n\n\n:::\n:::\n\n## day and time\n\n::: {.cell}\n\n```{.r .cell-code}\nnow_time=now()\nnow_time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-02-17 15:22:32 CST\"\n```\n\n\n:::\n:::\n\n### get year\n\n::: {.cell}\n\n```{.r .cell-code}\nyear(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2025\n```\n\n\n:::\n:::\n\n### get month\n\n::: {.cell}\n\n```{.r .cell-code}\nmonth(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n### get date of the month\n\n::: {.cell}\n\n```{.r .cell-code}\nmday(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 17\n```\n\n\n:::\n:::\n\n### get date of the year\n\n::: {.cell}\n\n```{.r .cell-code}\nyday(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48\n```\n\n\n:::\n:::\n\n### get date of the week\n\n::: {.cell}\n\n```{.r .cell-code}\nwday(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n#### get hour\n\n::: {.cell}\n\n```{.r .cell-code}\nhour(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 15\n```\n\n\n:::\n:::\n\n### get minute\n\n::: {.cell}\n\n```{.r .cell-code}\nminute(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n:::\n\n### get second\n\n::: {.cell}\n\n```{.r .cell-code}\nsecond(now_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32.91837\n```\n\n\n:::\n:::\n\n## dataframe to other data format\n\n### dataframe to vector\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=small_mtcars$cyl\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6 6 4 6 8 6\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n### dataframe to matrix\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=data.matrix(small_mtcars)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     car_name cyl  mpg  hp\n[1,]        4   6 21.0 110\n[2,]        5   6 21.0 110\n[3,]        1   4 22.8  93\n[4,]        2   6 21.4 110\n[5,]        3   8 18.7 175\n[6,]        6   6 18.1 105\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"matrix\" \"array\" \n```\n\n\n:::\n:::\n\n### dataframe to list\n\n::: {.cell}\n\n```{.r .cell-code}\ndata=as.list(small_mtcars)\ndata\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$car_name\n[1] \"Mazda RX4\"         \"Mazda RX4 Wag\"     \"Datsun 710\"       \n[4] \"Hornet 4 Drive\"    \"Hornet Sportabout\" \"Valiant\"          \n\n$cyl\n[1] 6 6 4 6 8 6\n\n$mpg\n[1] 21.0 21.0 22.8 21.4 18.7 18.1\n\n$hp\n[1] 110 110  93 110 175 105\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n# reference:\n\nhttps://dplyr.tidyverse.org/\n\nhttps://evoldyn.gitlab.io/evomics-2018/ref-sheets/R_strings.pdf\n\nhttps://www.youtube.com/watch?v=3Aki_sQYQG0\n\nhttps://www.r-bloggers.com/2018/07/r-null-values-null-na-nan-inf\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}