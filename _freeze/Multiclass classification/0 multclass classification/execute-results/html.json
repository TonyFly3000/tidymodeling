{
  "hash": "a14da4268201225146c92ebfe1654f61",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Customer Segmentation Dataset\"\n\nauthor: \"Tony Duan\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n![](images/dataset-cover.jpg)\n\n# data download\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\n#hotels <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\ndf_train_raw <- readr::read_csv(\"data/train.csv\")\ndf_train_test<- readr::read_csv(\"data/test.csv\")\n```\n:::\n\n\nData have 8068 record and 11 variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df_train_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 8,068\nColumns: 11\n$ ID              <dbl> 462809, 462643, 466315, 461735, 462669, 461319, 460156…\n$ Gender          <chr> \"Male\", \"Female\", \"Female\", \"Male\", \"Female\", \"Male\", …\n$ Ever_Married    <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"…\n$ Age             <dbl> 22, 38, 67, 67, 40, 56, 32, 33, 61, 55, 26, 19, 19, 70…\n$ Graduated       <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", …\n$ Profession      <chr> \"Healthcare\", \"Engineer\", \"Engineer\", \"Lawyer\", \"Enter…\n$ Work_Experience <dbl> 1, NA, 1, 0, NA, 0, 1, 1, 0, 1, 1, 4, 0, NA, 0, 1, 9, …\n$ Spending_Score  <chr> \"Low\", \"Average\", \"Low\", \"High\", \"High\", \"Average\", \"L…\n$ Family_Size     <dbl> 4, 3, 1, 2, 6, 2, 3, 3, 3, 4, 3, 4, NA, 1, 1, 2, 5, 6,…\n$ Var_1           <chr> \"Cat_4\", \"Cat_4\", \"Cat_6\", \"Cat_6\", \"Cat_6\", \"Cat_6\", …\n$ Segmentation    <chr> \"D\", \"A\", \"B\", \"B\", \"A\", \"C\", \"C\", \"D\", \"D\", \"C\", \"A\",…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train_raw %>% group_by(Segmentation) %>% count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n# Groups:   Segmentation [4]\n  Segmentation     n\n  <chr>        <int>\n1 A             1972\n2 B             1858\n3 C             1970\n4 D             2268\n```\n\n\n:::\n:::\n\n\n# ploting and EDA\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(skimr)\n\nskim(df_train_raw)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |             |\n|:------------------------|:------------|\n|Name                     |df_train_raw |\n|Number of rows           |8068         |\n|Number of columns        |11           |\n|_______________________  |             |\n|Column type frequency:   |             |\n|character                |7            |\n|numeric                  |4            |\n|________________________ |             |\n|Group variables          |None         |\n\n\n**Variable type: character**\n\n|skim_variable  | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:--------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Gender         |         0|          1.00|   4|   6|     0|        2|          0|\n|Ever_Married   |       140|          0.98|   2|   3|     0|        2|          0|\n|Graduated      |        78|          0.99|   2|   3|     0|        2|          0|\n|Profession     |       124|          0.98|   6|  13|     0|        9|          0|\n|Spending_Score |         0|          1.00|   3|   7|     0|        3|          0|\n|Var_1          |        76|          0.99|   5|   5|     0|        7|          0|\n|Segmentation   |         0|          1.00|   1|   1|     0|        4|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable   | n_missing| complete_rate|      mean|      sd|     p0|      p25|      p50|      p75|   p100|hist  |\n|:---------------|---------:|-------------:|---------:|-------:|------:|--------:|--------:|--------:|------:|:-----|\n|ID              |         0|          1.00| 463479.21| 2595.38| 458982| 461240.8| 463472.5| 465744.2| 467974|▇▇▇▇▇ |\n|Age             |         0|          1.00|     43.47|   16.71|     18|     30.0|     40.0|     53.0|     89|▇▇▅▃▂ |\n|Work_Experience |       829|          0.90|      2.64|    3.41|      0|      0.0|      1.0|      4.0|     14|▇▁▂▁▁ |\n|Family_Size     |       335|          0.96|      2.85|    1.53|      1|      2.0|      3.0|      4.0|      9|▇▆▁▁▁ |\n\n\n:::\n:::\n\n\n## Measurement:\n\n-   Accuracy=TP+TN+FP+FN\n\n-   Precision --- Out of all the examples that predicted as positive, how many are really positive?\n\nPrecision=TP/(TP+FP)\n\n-   Recall/Sensitivity(True Positive rate) — Out of all the positive examples, how many are predicted as positive?\n\nRecall=TP/(TP+FN)\n\n-   Specificity(True Negative rate)— Out of all the people that do not have the disease, how many got negative results?\n\n-   Specificity=TN/(TN+FP)\n\n-   False Positive rate=1-Specificity\n\n-   False Negative Rat=FN/(TP+FN)\n\nFalse Negative Rate tells us what proportion of the positive class got incorrectly classified by the classifier\n\n-   F1 score=2/(1/Precision+1/Recall)\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}