{
  "hash": "5f22b22eb01c4774db6fc488cb68c1e8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Multiple Classification Model with recipe,workflow set,fast tuning\"\nsubtitle: \"with Customer Segmentation Dataset\"\n\n\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n\nLevel 6 classification Tidy Modeling: \n\n* using Recipe to down sample.\n* add resamples to estimate the performance of our two models\n* add workflow with tuning\n* add  tuning\n* add workflow set and setting different tuning grid for different model\n\n\n\n\nlogistic glm model \n\ntuning decision tree model with rpart engine(tunning:cost_complexity,tree_depth)\n\nKNN model with knn engine(knn_spec)\n\ntuning XG boost model (tunning:tree_depth , min_n,loss_reduction ,sample_size ,   mtry,learn_rate)\n\ntuning light gbm boost model(tunning:tree_depth , min_n,loss_reduction ,sample_size ,   mtry,learn_rate)\n\n\n# load package\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load Pacakges & Set Options\"}\nlibrary(themis)\nlibrary(tidyverse)      \nlibrary(tidymodels)     \nlibrary(palmerpenguins) # penguin dataset\nlibrary(gt)             # better tables\nlibrary(bonsai)         # tree-based models\nlibrary(conflicted)     # function conflicts\nlibrary(vetiver)\nlibrary(Microsoft365R)\nlibrary(pins)\ntidymodels_prefer()     # handle conflicts\nconflict_prefer(\"penguins\", \"palmerpenguins\")\noptions(tidymodels.dark = TRUE) # dark mode\ntheme_set(theme_bw()) # set default ggplot2 theme\n```\n:::\n\n\n# data preparation\n\n## read data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\ndf_train_raw <- readr::read_csv(\"data/Train.csv\")\n\ndf_test_raw<- readr::read_csv(\"data/Test.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndf_train=df_train_raw %>% mutate(target_variable=as.factor(Segmentation)) %>% select(-Segmentation)\n#%>% filter(target_variable %in% c('A','B'))\ndf_test=df_test_raw\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(df_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 8,068\nColumns: 11\n$ ID              <dbl> 462809, 462643, 466315, 461735, 462669, 461319, 460156…\n$ Gender          <chr> \"Male\", \"Female\", \"Female\", \"Male\", \"Female\", \"Male\", …\n$ Ever_Married    <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"No\", \"…\n$ Age             <dbl> 22, 38, 67, 67, 40, 56, 32, 33, 61, 55, 26, 19, 19, 70…\n$ Graduated       <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", …\n$ Profession      <chr> \"Healthcare\", \"Engineer\", \"Engineer\", \"Lawyer\", \"Enter…\n$ Work_Experience <dbl> 1, NA, 1, 0, NA, 0, 1, 1, 0, 1, 1, 4, 0, NA, 0, 1, 9, …\n$ Spending_Score  <chr> \"Low\", \"Average\", \"Low\", \"High\", \"High\", \"Average\", \"L…\n$ Family_Size     <dbl> 4, 3, 1, 2, 6, 2, 3, 3, 3, 4, 3, 4, NA, 1, 1, 2, 5, 6,…\n$ Var_1           <chr> \"Cat_4\", \"Cat_4\", \"Cat_6\", \"Cat_6\", \"Cat_6\", \"Cat_6\", …\n$ target_variable <fct> D, A, B, B, A, C, C, D, D, C, A, D, D, A, B, C, D, B, …\n```\n\n\n:::\n:::\n\n\n## data split\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndata_split <- initial_validation_split(data=df_train, prop = c(0.7,0.2))\n\ndata_train=training(data_split)  \n\ndata_test=testing(data_split)  \n\ndata_valid=validation(data_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 5647   11\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 807  11\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_valid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1614   11\n```\n\n\n:::\n:::\n\n\n10 fold for tunning\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(234)\nfolds <- vfold_cv(data_train)\n```\n:::\n\n\n# modeling\n\n## recipe\n\nbecasue the target class is not balance so using downsample\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_rec <- recipe(target_variable ~ ., data = data_train) %>%\n  step_rm(ID) %>% \n  #step_downsample(target_variable) %>%\n  step_impute_median(all_numeric(), -all_outcomes())%>% \n  step_impute_mode(all_nominal(), -all_outcomes())%>% \n  step_dummy(all_nominal(), -all_outcomes()) %>%\n  step_zv(all_numeric()) %>%\n  step_normalize(all_numeric())\n```\n:::\n\n\n\n## model\n\n### decision tree model with cost_complexity and tree_depth to tune\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_spec <- \n  decision_tree(\n    cost_complexity = tune(),\n    tree_depth = tune()\n  ) %>% \n  set_engine(\"rpart\") %>% \n  set_mode(\"classification\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntune_spec |> \n  extract_parameter_set_dials()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCollection of 2 parameters for tuning\n\n      identifier            type    object\n cost_complexity cost_complexity nparam[+]\n      tree_depth      tree_depth nparam[+]\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndecision_tree_tune_grid <- \n  tune_spec |> \n  extract_parameter_set_dials() |> \n  grid_latin_hypercube(size = 100)\n```\n:::\n\n\n\n### logistic glm model \n\nusing `multinom_reg()` since its multiclass classification\n\n::: {.cell}\n\n```{.r .cell-code}\nglm_spec <-\n  multinom_reg() |>\n  set_engine(\"nnet\")\n```\n:::\n\n\n\n### KNN model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_spec <- nearest_neighbor() %>%\n  set_engine(\"kknn\") %>%\n  set_mode(\"classification\")\n\nknn_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nK-Nearest Neighbor Model Specification (classification)\n\nComputational engine: kknn \n```\n\n\n:::\n:::\n\n\n\n\n\n### XG Boost tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_spec <- boost_tree(\n  trees = 10,\n  tree_depth = tune(), min_n = tune(),\n  loss_reduction = tune(),                     ## first three: model complexity\n  sample_size = tune(),  mtry=tune(),       ## randomness\n  learn_rate = tune()                          ## step size\n) %>%\n  set_engine(\"xgboost\") %>%\n  set_mode(\"classification\")\n\nxgb_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBoosted Tree Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 10\n  min_n = tune()\n  tree_depth = tune()\n  learn_rate = tune()\n  loss_reduction = tune()\n  sample_size = tune()\n\nComputational engine: xgboost \n```\n\n\n:::\n:::\n\n\nxgb tunning grid\n\n\n::: {.cell}\n\n```{.r .cell-code}\nxgb_tune_grid= grid_latin_hypercube(\n  tree_depth(),learn_rate(),loss_reduction(),min_n(),\n  sample_size=sample_prop(),finalize(mtry(),data_train),\n  size=10)\n\nhead(xgb_tune_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  tree_depth learn_rate loss_reduction min_n sample_size  mtry\n       <int>      <dbl>          <dbl> <int>       <dbl> <int>\n1          1   2.47e- 6       4.50e- 4    20       0.398    11\n2         15   1.41e- 7       1.35e-10     5       0.219     9\n3          7   1.51e- 8       1.89e- 3    27       0.942     2\n4         13   1.59e- 4       2.10e- 8    36       0.319     4\n5          8   2.73e- 2       5.16e- 1    33       0.183     6\n6          9   1.93e-10       5.17e- 5    10       0.905     3\n```\n\n\n:::\n:::\n\n\n\n\n### lightGBM Boost tree\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlightgbm_spec <- boost_tree(\n  trees = 10,\n  tree_depth = tune(), min_n = tune(),\n  loss_reduction = tune(),                     ## first three: model complexity\n  sample_size = tune(),   mtry=tune(),     ## randomness\n  learn_rate = tune()                          ## step size\n) %>%\n  set_engine(\"lightgbm\") %>%\n  set_mode(\"classification\")\n\nlightgbm_spec\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nBoosted Tree Model Specification (classification)\n\nMain Arguments:\n  mtry = tune()\n  trees = 10\n  min_n = tune()\n  tree_depth = tune()\n  learn_rate = tune()\n  loss_reduction = tune()\n  sample_size = tune()\n\nComputational engine: lightgbm \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlightgbm_grid= grid_latin_hypercube(\n  tree_depth(),learn_rate(),loss_reduction(),min_n(),\n  sample_size=sample_prop(),finalize(mtry(),data_train),\n  size=10)\n\nhead(lightgbm_grid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 6\n  tree_depth    learn_rate loss_reduction min_n sample_size  mtry\n       <int>         <dbl>          <dbl> <int>       <dbl> <int>\n1         13 0.00297         0.0000286       32       0.737     6\n2         11 0.00000110      0.0119          24       0.982     9\n3          5 0.00000671      0.0000000109    11       0.709     2\n4          4 0.00000000266   0.00140         34       0.619     9\n5          5 0.0000000602   24.2              6       0.432     4\n6          7 0.000112        0.000470         3       0.257     6\n```\n\n\n:::\n:::\n\n\n\n\n\n\n## workflow set \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(finetune)\ncntl   <- control_grid(save_pred     = TRUE,\n                       save_workflow = TRUE)\n```\n:::\n\n\n\n\nusing workflow set instead of workflow to combine many models.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow_set <-\n  workflow_set(\n    preproc = list(data_rec),\n    models = list(glm   = glm_spec,\n                  tree  = tune_spec,\n                  knn=knn_spec,\n                  xgb=xgb_spec,\n                  lightgbm=lightgbm_spec\n                  )\n  ) %>%\n  #option_add(grid = decision_tree_tune_grid, id = \"recipe_tree\")  %>% \n  option_add(grid = xgb_tune_grid, id = \"recipe_xgb\")  %>% \n  option_add(grid = lightgbm_grid, id = \"recipe_lightgbm\") \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nworkflow_set %>%\n  option_add_parameters()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A workflow set/tibble: 5 × 4\n  wflow_id        info             option    result    \n  <chr>           <list>           <list>    <list>    \n1 recipe_glm      <tibble [1 × 4]> <opts[0]> <list [0]>\n2 recipe_tree     <tibble [1 × 4]> <opts[1]> <list [0]>\n3 recipe_knn      <tibble [1 × 4]> <opts[0]> <list [0]>\n4 recipe_xgb      <tibble [1 × 4]> <opts[2]> <list [0]>\n5 recipe_lightgbm <tibble [1 × 4]> <opts[2]> <list [0]>\n```\n\n\n:::\n:::\n\n\n\n## training and tunning\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(finetune)\ndoParallel::registerDoParallel()\n\nmodel_set_res = workflow_set  %>% \n  workflow_map(\n              grid = 10,\n               resamples = folds,\n               control = cntl\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrank_results(model_set_res,\n             rank_metric = \"accuracy\",\n             select_best = TRUE)  %>% \n  gt()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div id=\"gmsocmmjbn\" style=\"padding-left:0px;padding-right:0px;padding-top:10px;padding-bottom:10px;overflow-x:auto;overflow-y:auto;width:auto;height:auto;\">\n<style>#gmsocmmjbn table {\n  font-family: system-ui, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n#gmsocmmjbn thead, #gmsocmmjbn tbody, #gmsocmmjbn tfoot, #gmsocmmjbn tr, #gmsocmmjbn td, #gmsocmmjbn th {\n  border-style: none;\n}\n\n#gmsocmmjbn p {\n  margin: 0;\n  padding: 0;\n}\n\n#gmsocmmjbn .gt_table {\n  display: table;\n  border-collapse: collapse;\n  line-height: normal;\n  margin-left: auto;\n  margin-right: auto;\n  color: #333333;\n  font-size: 16px;\n  font-weight: normal;\n  font-style: normal;\n  background-color: #FFFFFF;\n  width: auto;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #A8A8A8;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #A8A8A8;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_caption {\n  padding-top: 4px;\n  padding-bottom: 4px;\n}\n\n#gmsocmmjbn .gt_title {\n  color: #333333;\n  font-size: 125%;\n  font-weight: initial;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-color: #FFFFFF;\n  border-bottom-width: 0;\n}\n\n#gmsocmmjbn .gt_subtitle {\n  color: #333333;\n  font-size: 85%;\n  font-weight: initial;\n  padding-top: 3px;\n  padding-bottom: 5px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-color: #FFFFFF;\n  border-top-width: 0;\n}\n\n#gmsocmmjbn .gt_heading {\n  background-color: #FFFFFF;\n  text-align: center;\n  border-bottom-color: #FFFFFF;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_bottom_border {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_col_headings {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_col_heading {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 6px;\n  padding-left: 5px;\n  padding-right: 5px;\n  overflow-x: hidden;\n}\n\n#gmsocmmjbn .gt_column_spanner_outer {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: normal;\n  text-transform: inherit;\n  padding-top: 0;\n  padding-bottom: 0;\n  padding-left: 4px;\n  padding-right: 4px;\n}\n\n#gmsocmmjbn .gt_column_spanner_outer:first-child {\n  padding-left: 0;\n}\n\n#gmsocmmjbn .gt_column_spanner_outer:last-child {\n  padding-right: 0;\n}\n\n#gmsocmmjbn .gt_column_spanner {\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: bottom;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  overflow-x: hidden;\n  display: inline-block;\n  width: 100%;\n}\n\n#gmsocmmjbn .gt_spanner_row {\n  border-bottom-style: hidden;\n}\n\n#gmsocmmjbn .gt_group_heading {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  text-align: left;\n}\n\n#gmsocmmjbn .gt_empty_group_heading {\n  padding: 0.5px;\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  vertical-align: middle;\n}\n\n#gmsocmmjbn .gt_from_md > :first-child {\n  margin-top: 0;\n}\n\n#gmsocmmjbn .gt_from_md > :last-child {\n  margin-bottom: 0;\n}\n\n#gmsocmmjbn .gt_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  margin: 10px;\n  border-top-style: solid;\n  border-top-width: 1px;\n  border-top-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 1px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 1px;\n  border-right-color: #D3D3D3;\n  vertical-align: middle;\n  overflow-x: hidden;\n}\n\n#gmsocmmjbn .gt_stub {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gmsocmmjbn .gt_stub_row_group {\n  color: #333333;\n  background-color: #FFFFFF;\n  font-size: 100%;\n  font-weight: initial;\n  text-transform: inherit;\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n  padding-left: 5px;\n  padding-right: 5px;\n  vertical-align: top;\n}\n\n#gmsocmmjbn .gt_row_group_first td {\n  border-top-width: 2px;\n}\n\n#gmsocmmjbn .gt_row_group_first th {\n  border-top-width: 2px;\n}\n\n#gmsocmmjbn .gt_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gmsocmmjbn .gt_first_summary_row {\n  border-top-style: solid;\n  border-top-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_first_summary_row.thick {\n  border-top-width: 2px;\n}\n\n#gmsocmmjbn .gt_last_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_grand_summary_row {\n  color: #333333;\n  background-color: #FFFFFF;\n  text-transform: inherit;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gmsocmmjbn .gt_first_grand_summary_row {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-top-style: double;\n  border-top-width: 6px;\n  border-top-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_last_grand_summary_row_top {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  padding-left: 5px;\n  padding-right: 5px;\n  border-bottom-style: double;\n  border-bottom-width: 6px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_striped {\n  background-color: rgba(128, 128, 128, 0.05);\n}\n\n#gmsocmmjbn .gt_table_body {\n  border-top-style: solid;\n  border-top-width: 2px;\n  border-top-color: #D3D3D3;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_footnotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_footnote {\n  margin: 0px;\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gmsocmmjbn .gt_sourcenotes {\n  color: #333333;\n  background-color: #FFFFFF;\n  border-bottom-style: none;\n  border-bottom-width: 2px;\n  border-bottom-color: #D3D3D3;\n  border-left-style: none;\n  border-left-width: 2px;\n  border-left-color: #D3D3D3;\n  border-right-style: none;\n  border-right-width: 2px;\n  border-right-color: #D3D3D3;\n}\n\n#gmsocmmjbn .gt_sourcenote {\n  font-size: 90%;\n  padding-top: 4px;\n  padding-bottom: 4px;\n  padding-left: 5px;\n  padding-right: 5px;\n}\n\n#gmsocmmjbn .gt_left {\n  text-align: left;\n}\n\n#gmsocmmjbn .gt_center {\n  text-align: center;\n}\n\n#gmsocmmjbn .gt_right {\n  text-align: right;\n  font-variant-numeric: tabular-nums;\n}\n\n#gmsocmmjbn .gt_font_normal {\n  font-weight: normal;\n}\n\n#gmsocmmjbn .gt_font_bold {\n  font-weight: bold;\n}\n\n#gmsocmmjbn .gt_font_italic {\n  font-style: italic;\n}\n\n#gmsocmmjbn .gt_super {\n  font-size: 65%;\n}\n\n#gmsocmmjbn .gt_footnote_marks {\n  font-size: 75%;\n  vertical-align: 0.4em;\n  position: initial;\n}\n\n#gmsocmmjbn .gt_asterisk {\n  font-size: 100%;\n  vertical-align: 0;\n}\n\n#gmsocmmjbn .gt_indent_1 {\n  text-indent: 5px;\n}\n\n#gmsocmmjbn .gt_indent_2 {\n  text-indent: 10px;\n}\n\n#gmsocmmjbn .gt_indent_3 {\n  text-indent: 15px;\n}\n\n#gmsocmmjbn .gt_indent_4 {\n  text-indent: 20px;\n}\n\n#gmsocmmjbn .gt_indent_5 {\n  text-indent: 25px;\n}\n</style>\n<table class=\"gt_table\" data-quarto-disable-processing=\"false\" data-quarto-bootstrap=\"false\">\n  <thead>\n    <tr class=\"gt_col_headings\">\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"wflow_id\">wflow_id</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".config\">.config</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\".metric\">.metric</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"mean\">mean</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"std_err\">std_err</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"n\">n</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"preprocessor\">preprocessor</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_left\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"model\">model</th>\n      <th class=\"gt_col_heading gt_columns_bottom_border gt_right\" rowspan=\"1\" colspan=\"1\" scope=\"col\" id=\"rank\">rank</th>\n    </tr>\n  </thead>\n  <tbody class=\"gt_table_body\">\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_xgb</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model06</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">accuracy</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.5082270</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">8.273046e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_xgb</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model06</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">brier_class</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.3732666</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">3.222901e-05</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_xgb</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model06</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">roc_auc</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.7630375</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">3.825994e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">1</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_tree</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model02</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">accuracy</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.5080500</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">6.889790e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">decision_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_tree</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model02</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">brier_class</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.3078043</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">2.744968e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">decision_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_tree</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model02</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">roc_auc</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.7479156</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">5.425592e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">decision_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">2</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_glm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">accuracy</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.5032753</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">8.839371e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">multinom_reg</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_glm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">brier_class</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.3048293</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">2.551260e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">multinom_reg</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_glm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">roc_auc</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.7542779</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">5.770592e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">multinom_reg</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">3</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lightgbm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model05</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">accuracy</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.4779517</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">9.344905e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lightgbm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model05</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">brier_class</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.3417080</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">1.534749e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_lightgbm</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model05</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">roc_auc</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.7263411</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">6.250417e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">boost_tree</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">4</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_knn</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">accuracy</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.4521041</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">5.486483e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">nearest_neighbor</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_knn</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">brier_class</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.3802044</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">2.918211e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">nearest_neighbor</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">5</td></tr>\n    <tr><td headers=\"wflow_id\" class=\"gt_row gt_left\">recipe_knn</td>\n<td headers=\".config\" class=\"gt_row gt_left\">Preprocessor1_Model1</td>\n<td headers=\".metric\" class=\"gt_row gt_left\">roc_auc</td>\n<td headers=\"mean\" class=\"gt_row gt_right\">0.7039305</td>\n<td headers=\"std_err\" class=\"gt_row gt_right\">3.245546e-03</td>\n<td headers=\"n\" class=\"gt_row gt_right\">10</td>\n<td headers=\"preprocessor\" class=\"gt_row gt_left\">recipe</td>\n<td headers=\"model\" class=\"gt_row gt_left\">nearest_neighbor</td>\n<td headers=\"rank\" class=\"gt_row gt_right\">5</td></tr>\n  </tbody>\n  \n  \n</table>\n</div>\n```\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_set_res |> autoplot()\n```\n\n::: {.cell-output-display}\n![](6-multclass-classification_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel_set_res |> autoplot( id= 'recipe_xgb')\n```\n\n::: {.cell-output-display}\n![](6-multclass-classification_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\nselect best model:logistic glm model \n\n::: {.cell}\n\n```{.r .cell-code}\nbest_model_id <- \"recipe_xgb\"\n```\n:::\n\n\nselect best parameters\n\n::: {.cell}\n\n```{.r .cell-code}\nbest_fit <-\n  model_set_res |>\n  extract_workflow_set_result(best_model_id) |>\n  select_best(metric = \"accuracy\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create workflow for best model\nfinal_workflow <-\n  model_set_res |>\n  extract_workflow(best_model_id) |>\n  finalize_workflow(best_fit)\n```\n:::\n\n\n\n\n\n\n## last fit\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit <-\n  final_workflow |>\n  last_fit(data_split)\n```\n:::\n\n\n\n# model result\n\n## Evaluate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_fit %>%\n  collect_metrics()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  .metric     .estimator .estimate .config             \n  <chr>       <chr>          <dbl> <chr>               \n1 accuracy    multiclass     0.550 Preprocessor1_Model1\n2 roc_auc     hand_till      0.787 Preprocessor1_Model1\n3 brier_class multiclass     0.373 Preprocessor1_Model1\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_metrics <- metric_set(accuracy, recall, precision, f_meas, kap, sens, spec)\n\na=final_fit %>% collect_predictions()\n\nall_metrics(a, truth = target_variable,estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7 × 3\n  .metric   .estimator .estimate\n  <chr>     <chr>          <dbl>\n1 accuracy  multiclass     0.550\n2 recall    macro          0.536\n3 precision macro          0.533\n4 f_meas    macro          0.530\n5 kap       multiclass     0.396\n6 sens      macro          0.536\n7 spec      macro          0.850\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#final_fit %>%\n#  collect_predictions() %>% \n # roc_curve(target_variable, .pred_children) %>% \n # autoplot()\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_tree <- extract_workflow(final_fit)\nfinal_tree\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n══ Workflow [trained] ══════════════════════════════════════════════════════════\nPreprocessor: Recipe\nModel: boost_tree()\n\n── Preprocessor ────────────────────────────────────────────────────────────────\n6 Recipe Steps\n\n• step_rm()\n• step_impute_median()\n• step_impute_mode()\n• step_dummy()\n• step_zv()\n• step_normalize()\n\n── Model ───────────────────────────────────────────────────────────────────────\n##### xgb.Booster\nraw: 187.5 Kb \ncall:\n  xgboost::xgb.train(params = list(eta = 0.00188744903053763, max_depth = 14L, \n    gamma = 1.47066004807873, colsample_bytree = 1, colsample_bynode = 0.545454545454545, \n    min_child_weight = 5L, subsample = 0.300618941169232), data = x$data, \n    nrounds = 10, watchlist = x$watchlist, verbose = 0, nthread = 1, \n    objective = \"multi:softprob\", num_class = 4L)\nparams (as set within xgb.train):\n  eta = \"0.00188744903053763\", max_depth = \"14\", gamma = \"1.47066004807873\", colsample_bytree = \"1\", colsample_bynode = \"0.545454545454545\", min_child_weight = \"5\", subsample = \"0.300618941169232\", nthread = \"1\", objective = \"multi:softprob\", num_class = \"4\", validate_parameters = \"TRUE\"\nxgb.attributes:\n  niter\ncallbacks:\n  cb.evaluation.log()\n# of features: 22 \nniter: 10\nnfeatures : 22 \nevaluation_log:\n     iter training_mlogloss\n    <num>             <num>\n        1          1.385471\n        2          1.384689\n---                        \n        9          1.379286\n       10          1.378525\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(vip)\n\nfinal_tree %>% \n  extract_fit_parsnip() %>% \n  vip()\n```\n\n::: {.cell-output-display}\n![](6-multclass-classification_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n## save model\n\ncheck model size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lobstr)\nobj_size(final_tree)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n1.84 MB\n```\n\n\n:::\n:::\n\n\nbundle and save model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bundle)\nmodel_bundle <- bundle(final_tree)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(model_bundle,'level 6 multclass classification model.RDS')\n```\n:::\n\n\n## make predication\n\nload model and unbundle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel=readRDS('level 6 multclass classification model.RDS')\n\nmodel <- unbundle(model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction=predict(model,data_valid)\n\nhead(final_prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  .pred_class\n  <fct>      \n1 B          \n2 C          \n3 D          \n4 D          \n5 D          \n6 C          \n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction %>%group_by(.pred_class) %>% count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n# Groups:   .pred_class [4]\n  .pred_class     n\n  <fct>       <int>\n1 A             448\n2 B             229\n3 C             399\n4 D             538\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction_data=cbind(data_valid,final_prediction)\n\nconf_mat(final_prediction_data, truth = target_variable,\n    estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction   A   B   C   D\n         A 185 100  58 105\n         B  54  91  60  24\n         C  57 115 217  10\n         D  96  56  65 321\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy(final_prediction_data, truth = target_variable, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy multiclass     0.504\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction_data %>% group_by(target_variable)%>% count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n# Groups:   target_variable [4]\n  target_variable     n\n  <fct>           <int>\n1 A                 392\n2 B                 362\n3 C                 400\n4 D                 460\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction_data %>% group_by(.pred_class) %>% count()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n# Groups:   .pred_class [4]\n  .pred_class     n\n  <fct>       <int>\n1 A             448\n2 B             229\n3 C             399\n4 D             538\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_mat(final_prediction_data, truth = target_variable,\n    estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction   A   B   C   D\n         A 185 100  58 105\n         B  54  91  60  24\n         C  57 115 217  10\n         D  96  56  65 321\n```\n\n\n:::\n:::\n\n\n# reference:\n\n\nhttps://www.tmwr.org\n\nhttps://www.youtube.com/watch?v=IzjmuGJgwKQ\n\nhttps://www.youtube.com/watch?v=_e0NFIaHY2c\n\n\n",
    "supporting": [
      "6-multclass-classification_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}