{
  "hash": "897922eb11a5975be63444e05ad515df",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Classification Model\"\nsubtitle: \"with hotel booking data\"\nauthor: \"Tony Duan\"\nexecute:\n  warning: false\n  error: false\nformat:\n  html:\n    toc: true\n    toc-location: right\n    code-fold: show\n    code-tools: true\n    number-sections: true\n    code-block-bg: true\n    code-block-border-left: \"#31BAE9\"\n---\n\n\n# Introduction\n\nLevel 1 classification Tidy Modeling with 2 model and no recipe: \n\n*using basic Tidymodel package.\n\nNo recipe\n\ndecision tree model with rpart engine(tree_spec)\n\nKNN model with knn engine(knn_spec)\n\n\n# load package\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Load Pacakges & Set Options\"}\nlibrary(themis)\nlibrary(tidyverse)      \nlibrary(tidymodels)     \nlibrary(palmerpenguins) # penguin dataset\nlibrary(gt)             # better tables\nlibrary(bonsai)         # tree-based models\nlibrary(conflicted)     # function conflicts\nlibrary(vetiver)\nlibrary(Microsoft365R)\nlibrary(pins)\ntidymodels_prefer()     # handle conflicts\nconflict_prefer(\"penguins\", \"palmerpenguins\")\noptions(tidymodels.dark = TRUE) # dark mode\ntheme_set(theme_bw()) # set default ggplot2 theme\n```\n:::\n\n\n# data preparation\n\n## read data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nhotels <- readr::read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv\")\n\n\nhotel_stays <- hotels %>%\n  filter(is_canceled == 0) %>%\n  mutate(\n    children = case_when(\n      children + babies > 0 ~ \"children\",\n      TRUE ~ \"none\"\n    ),\n    required_car_parking_spaces = case_when(\n      required_car_parking_spaces > 0 ~ \"parking\",\n      TRUE ~ \"none\"\n    )\n  ) %>%\n  select(-is_canceled, -reservation_status, -babies)\n```\n:::\n\n\n\n\n## data split\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"Prepare & Split Data\"}\nhotels_df <- hotel_stays %>%\n  select(\n    children, hotel, arrival_date_month, meal, adr, adults,\n    required_car_parking_spaces, total_of_special_requests,\n    stays_in_week_nights, stays_in_weekend_nights\n  ) %>%\n  mutate_if(is.character, factor) %>% rename(target_variable=children) %>% sample_n(10000)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n\ndata_split <- initial_validation_split(data=hotels_df, prop = c(0.7,0.2))\n\ndata_train=training(data_split)  \n\ndata_test=testing(data_split)  \n\ndata_valid=validation(data_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7000   10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1000   10\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_valid)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2000   10\n```\n\n\n:::\n:::\n\n\n# modeling\n\n## recipe\n\ndid not use recipe at this case\n\n## model\n\ndecision tree model\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_spec <- decision_tree() %>%\n  set_engine(\"rpart\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\nKNN model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_spec <- nearest_neighbor() %>%\n  set_engine(\"kknn\") %>%\n  set_mode(\"classification\")\n```\n:::\n\n\n## trainning\n\n\n::: {.cell}\n\n```{.r .cell-code}\nknn_fit <- knn_spec %>%\n  fit(target_variable ~ ., data = data_train)\n\nknn_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\n\nCall:\nkknn::train.kknn(formula = target_variable ~ ., data = data,     ks = min_rows(5, data, 5))\n\nType of response variable: nominal\nMinimal misclassification: 0.08\nBest kernel: optimal\nBest k: 5\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntree_fit <- tree_spec %>%\n  fit(target_variable ~ ., data = data_train)\n\ntree_fit\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nparsnip model object\n\nn= 7000 \n\nnode), split, n, loss, yval, (yprob)\n      * denotes terminal node\n\n  1) root 7000 556 none (0.07942857 0.92057143)  \n    2) adr>=160.415 727 233 none (0.32049519 0.67950481)  \n      4) adults< 2.5 590 216 none (0.36610169 0.63389831)  \n        8) arrival_date_month=April,February,January,June,March 95  39 children (0.58947368 0.41052632) *\n        9) arrival_date_month=August,December,July,May,November,October,September 495 160 none (0.32323232 0.67676768)  \n         18) adr>=306 11   1 children (0.90909091 0.09090909) *\n         19) adr< 306 484 150 none (0.30991736 0.69008264)  \n           38) required_car_parking_spaces=parking 91  42 none (0.46153846 0.53846154)  \n             76) hotel=City Hotel 18   4 children (0.77777778 0.22222222) *\n             77) hotel=Resort Hotel 73  28 none (0.38356164 0.61643836) *\n           39) required_car_parking_spaces=none 393 108 none (0.27480916 0.72519084)  \n             78) adults>=1.5 339 103 none (0.30383481 0.69616519)  \n              156) hotel=City Hotel 142  60 none (0.42253521 0.57746479)  \n                312) arrival_date_month=August,December,July 60  21 children (0.65000000 0.35000000) *\n                313) arrival_date_month=May,November,October,September 82  21 none (0.25609756 0.74390244) *\n              157) hotel=Resort Hotel 197  43 none (0.21827411 0.78172589) *\n             79) adults< 1.5 54   5 none (0.09259259 0.90740741) *\n      5) adults>=2.5 137  17 none (0.12408759 0.87591241) *\n    3) adr< 160.415 6273 323 none (0.05149051 0.94850949) *\n```\n\n\n:::\n:::\n\n\n# model result\n\n## Evaluate\n\nMake predictions on the testing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredictions <- predict(tree_fit,data_test) \n\npredictions_probability <- predict(tree_fit,data_test,type=\"prob\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_test_result=cbind(data_test,predictions,predictions_probability) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_mat(data_test_result, truth = target_variable,\n    estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          Truth\nPrediction children none\n  children       16    7\n  none           59  918\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmetrics(data_test_result, target_variable, .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.934\n2 kap      binary         0.302\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\naccuracy(data_test_result, truth = target_variable, estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.934\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsens(data_test_result, truth = target_variable,\n    estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 sens    binary         0.213\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspec(data_test_result, truth = target_variable,\n    estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 spec    binary         0.992\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nall_metrics <- metric_set(accuracy, sens, spec)\n\nall_metrics(data_test_result, truth = target_variable,estimate = .pred_class)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 3\n  .metric  .estimator .estimate\n  <chr>    <chr>          <dbl>\n1 accuracy binary         0.934\n2 sens     binary         0.213\n3 spec     binary         0.992\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nconf_mat(data_test_result, truth = target_variable,estimate = .pred_class) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 3\n   .metric              .estimator .estimate\n   <chr>                <chr>          <dbl>\n 1 accuracy             binary         0.934\n 2 kap                  binary         0.302\n 3 sens                 binary         0.213\n 4 spec                 binary         0.992\n 5 ppv                  binary         0.696\n 6 npv                  binary         0.940\n 7 mcc                  binary         0.362\n 8 j_index              binary         0.206\n 9 bal_accuracy         binary         0.603\n10 detection_prevalence binary         0.023\n11 precision            binary         0.696\n12 recall               binary         0.213\n13 f_meas               binary         0.327\n```\n\n\n:::\n:::\n\n\nROC:receiver operating characteristic curve\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_curve(data_test_result, truth = target_variable, .pred_children) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](1-classification-Tidy-Modeling_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nAUC:Area under ROC Curve\n\n::: {.cell}\n\n```{.r .cell-code}\nroc_auc(data_test_result, truth = target_variable, .pred_children)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  .metric .estimator .estimate\n  <chr>   <chr>          <dbl>\n1 roc_auc binary         0.675\n```\n\n\n:::\n:::\n\n\n\n## save model\n\ncheck model size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(lobstr)\nobj_size(tree_fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n547.66 kB\n```\n\n\n:::\n:::\n\n\nbundle and save model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(bundle)\nmodel_bundle <- bundle(tree_fit)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsaveRDS(model_bundle,'level 1 classification tree hotel model.RDS')\n```\n:::\n\n\n## make predication\n\nload model and unbundle\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmodel=readRDS('level 1 classification tree hotel model.RDS')\n\nmodel <- unbundle(model)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nfinal_prediction=predict(model,data_valid)\n\nhead(final_prediction)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  .pred_class\n  <fct>      \n1 none       \n2 none       \n3 none       \n4 none       \n5 none       \n6 none       \n```\n\n\n:::\n:::\n\n\n# reference:\n",
    "supporting": [
      "1-classification-Tidy-Modeling_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}