---
title: "Level 1 Regression Tensorflow model"
subtitle: "with house price data"
execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---


# load package

```{python}
import tensorflow_decision_forests as tfdf
import pandas as pd

import tensorflow as tf
import tensorflow_decision_forests as tfdf
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
```

```{python}
print("TensorFlow v" + tf.__version__)
print("TensorFlow Decision Forests v" + tfdf.__version__)
```



# data preparation

## read data

```{python}


train_file_path = "data/train.csv"
dataset_df = pd.read_csv(train_file_path)
print("Full train dataset shape is {}".format(dataset_df.shape))

```


```{python}
dataset_df.head(3)
```

```{python}
dataset_df = dataset_df.drop('Id', axis=1)
dataset_df.head(3)
```


```{python}
dataset_df.info()
```


## data pre

```{python}
import numpy as np
def split_dataset(dataset, test_ratio=0.30):
  test_indices = np.random.rand(len(dataset)) < test_ratio
  return dataset[~test_indices], dataset[test_indices]

train_ds_pd, valid_ds_pd = split_dataset(dataset_df)
print("{} examples in training, {} examples in testing.".format(
    len(train_ds_pd), len(valid_ds_pd)))
```

```{python}
label = 'SalePrice'
train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(train_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)
valid_ds = tfdf.keras.pd_dataframe_to_tf_dataset(valid_ds_pd, label=label, task = tfdf.keras.Task.REGRESSION)
```




# model


## define model Keras random forest
```{python}
tfdf.keras.get_all_models()
```

```{python}
rf = tfdf.keras.RandomForestModel(task = tfdf.keras.Task.REGRESSION)
rf.compile(metrics=["mse"]) # Optional, you can use this to include a list of eval metrics
```


## train model
```{python}
rf.fit(x=train_ds)
```


```{python}
tfdf.model_plotter.plot_model_in_colab(rf, tree_idx=0, max_depth=3)
```

```{python}
import matplotlib.pyplot as plt
logs = rf.make_inspector().training_logs()
plt.plot([log.num_trees for log in logs], [log.evaluation.rmse for log in logs])
plt.xlabel("Number of trees")
plt.ylabel("RMSE (out-of-bag)")
plt.show()
```

```{python}
inspector = rf.make_inspector()
inspector.evaluation()
```


```{python}
evaluation = rf.evaluate(x=valid_ds,return_dict=True)

for name, value in evaluation.items():
  print(f"{name}: {value:.4f}")
```


```{python}
for name, value in evaluation.items():
  mse=value
```

RMSE
```{python}
import math
math.sqrt(mse)
```

## Variable importances

```{python}
print(f"Available variable importances:")
for importance in inspector.variable_importances().keys():
  print("\t", importance)
```

# future prediction

```{python}
test_file_path = "data/test.csv"
test_data = pd.read_csv(test_file_path)
ids = test_data.pop('Id')

test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(
    test_data,
    task = tfdf.keras.Task.REGRESSION)

preds = rf.predict(test_ds)
output = pd.DataFrame({'Id': ids,
                       'SalePrice': preds.squeeze()})

output.head()
```



# resouece

https://www.kaggle.com/code/gusthema/house-prices-prediction-using-tfdf



