---
title: "Principal component analysis "
subtitle: "with Mall Customers Datase"
execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---


Principal component analysis (PCA) is a method of reducing the dimensionality of data and is used to improve data visualization and speed up machine learning model training.






# load package

```{r}
library(tidymodels)
library(tidyverse)
```



# data

## download data

https://www.kaggle.com/datasets/shwetabh123/mall-customer




## input data

```{r}

url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"

# load dataset into Pandas DataFrame
df = read_csv(url,col_names = c('sepal_length','sepal_width','petal_length','petal_width','target'))

# Showing overview of the train dataset
head(df)
```


## STANDARDIZE THE DATA


PCA is affected by scale, so you need to scale the features in your data before applying PCA. Use StandardScaler to help you standardize the data set’s features onto unit scale (mean = 0 and variance = 1), which is a requirement for the optimal performance of many machine learning algorithms. If you don’t scale your data, it can have a negative effect on your algorithm. 


```{r}
numerical_data=data.matrix(df[c('sepal_length','sepal_width','petal_length','petal_width')])
```

```{r}
data_normalized <- scale(numerical_data)
head(data_normalized)
```


## Before STANDARDIZE


## After STANDARDIZE



## inverse STANDARDIZE.for testing purpose only, have no impact on PCA.

for testing purpose only.



# PCA PROJECTION TO 2D

```{r}
library("FactoMineR")
res.pca <- PCA(data_normalized,scale.unit = TRUE, ncp = 2, graph = TRUE)
```

```{r}
res.pca
```
```{r}
result=res.pca$ind$coord
```

```{r}
dim(result)
```

```{r}
dim(df)
```

```{r}
library("factoextra")
eig.val <- get_eigenvalue(res.pca)
eig.val
```

```{r}
fviz_eig(res.pca, addlabels = TRUE, ylim = c(0, 50))
```


```{r}
var <- get_pca_var(res.pca)
var
```





# reference:

https://www.datacamp.com/tutorial/pca-analysis-r

