---
title: "K mean Clustering with image"
subtitle: "with image data"

author: "Tony Duan"


execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---

Using K mean Clustering to replace colow on below picture


# load package

```{r}
set.seed(55)
library(tidyverse)
library(broom)
library(janitor)
library(magick)
```

# RBG no alpha channel picture:

## input image
```{r}
image <- image_read('images/python logo.jpg')
```


## convert png to matrix
```{r}
image_tiff <- image_convert(image, "tiff")
image_array <- as.integer(image_tiff[[1]])                
```




```{r}
magick::image_read(image_array/ 255)
```

235 * 214 pixcel and 3 channels
```{r}
dim(image_array)
```

```{r}
class(image_array)
```

Data Normalization

Since the dataset contains a range of values from 0 to 255, the dataset has to be normalized. Data Normalization is an important preprocessing step which ensures that each input parameter (pixel, in this case) has a similar data distribution. This fastens the process of covergence while training the model. Also Normalization makes sure no one particular parameter influences the output significantly.

```{r}
image_array=image_array/255
```



```{r}
image_array_old=image_array
```

## reshape from 3 D to 2 D
```{r}
dim(image_array) <- c(dim(image_array)[1]*dim(image_array)[2],3)
```

```{r}
dim(image_array)
```

## Optimal number of k-clusters


```{r}
kclusts <- 
  tibble(k = 1:9) %>%
  mutate(
    kclust = map(k, ~kmeans(image_array, .x)),
    tidied = map(kclust, tidy),
    glanced = map(kclust, glance),
    augmented = map(kclust, augment, image_array)
  )

kclusts
```


```{r}
clusters <- 
  kclusts %>%
  unnest(cols = c(tidied))

assignments <- 
  kclusts %>% 
  unnest(cols = c(augmented))

clusterings <- 
  kclusts %>%
  unnest(cols = c(glanced))
```



```{r}
library(scales)
ggplot(clusterings, aes(k, tot.withinss)) +
  geom_line() +
  geom_point()+scale_x_continuous(breaks= pretty_breaks())+scale_y_continuous(labels = scales::comma)
```



## group to 3 

```{r}
kclust <- kmeans(image_array, centers = 3)
```

```{r}
result=augment(kclust, image_array) %>% clean_names()
```



```{r}
result %>% count(cluster)
```

## change  2 color
```{r}
# black RGB code 0 0 0
# red RGB code 255 0 0

result2=result %>%mutate(x1=if_else(cluster==3,0,x1) 
                          ,x2=if_else(cluster==3,0,x2) 
                          ,x3=if_else(cluster==3,0,x3) 
                          )%>%mutate(x1=if_else(cluster==1,255,x1) 
                          ,x2=if_else(cluster==1,0,x2) 
                          ,x3=if_else(cluster==1,0,x3)) %>% select(-cluster)
```

## convert 2 D back to 3 D
```{r}
result2arrary=array(unlist(result2),c(dim(image_array_old)[1],dim(image_array_old)[2],3))
```


```{r}
dim(result2arrary)
```

convert from 0-1 back to 0-255

```{r}
result2arrary=result2arrary*255
```

```{r}
magick::image_read(result2arrary/ 255)
```



# RBG with alpha channel picture:




## input image
```{r}
image <- image_read('images/R_logo.png')
```


## convert png to matrix
```{r}
image_tiff <- image_convert(image, "tiff")
image_array <- as.integer(image_tiff[[1]])                
```


```{r}
magick::image_read(image_array/ 255)
```
561 * 724 pixcel and 4 channels
```{r}
dim(image_array)
```

```{r}
class(image_array)
```


```{r}
image_array_old=image_array
```

## reshape from 3 D to 2 D
```{r}
dim(image_array) <- c(dim(image_array)[1]*dim(image_array)[2],4)
```

```{r}
dim(image_array)
```

Data Normalization

Since the dataset contains a range of values from 0 to 255, the dataset has to be normalized. Data Normalization is an important preprocessing step which ensures that each input parameter (pixel, in this case) has a similar data distribution. This fastens the process of covergence while training the model. Also Normalization makes sure no one particular parameter influences the output significantly.


```{r}
image_array=image_array/255
```




## Optimal number of k-clusters


```{r}
kclusts <- 
  tibble(k = 1:9) %>%
  mutate(
    kclust = map(k, ~kmeans(image_array, .x)),
    tidied = map(kclust, tidy),
    glanced = map(kclust, glance),
    augmented = map(kclust, augment, image_array)
  )

kclusts
```


```{r}
clusters <- 
  kclusts %>%
  unnest(cols = c(tidied))

assignments <- 
  kclusts %>% 
  unnest(cols = c(augmented))

clusterings <- 
  kclusts %>%
  unnest(cols = c(glanced))
```



```{r}
library(scales)
ggplot(clusterings, aes(k, tot.withinss)) +
  geom_line() +
  geom_point()+scale_x_continuous(breaks= pretty_breaks())+scale_y_continuous(labels = scales::comma)
```



## group to 3 

```{r}
kclust <- kmeans(image_array, centers = 3)
```

```{r}
result=augment(kclust, image_array) %>% clean_names()
```



```{r}
result %>% count(cluster)
```

## change  2 color
```{r}
# black RGB code 0 0 0
# red RGB code 255 0 0

result2=result %>%mutate(x1=if_else(cluster==3,0,x1) 
                          ,x2=if_else(cluster==3,0,x2) 
                          ,x3=if_else(cluster==3,0,x3) 
                          )%>%mutate(x1=if_else(cluster==1,255,x1) 
                          ,x2=if_else(cluster==1,0,x2) 
                          ,x3=if_else(cluster==1,0,x3)) %>% select(-cluster)
```

## convert 2 D back to 4 D
```{r}
result2arrary=array(unlist(result2),c(dim(image_array_old)[1],dim(image_array_old)[2],4))
```


```{r}
dim(result2arrary)
```

convert from 0-1 back to 0-255

```{r}
result2arrary=result2arrary*255
```



```{r}
magick::image_read(result2arrary/ 255)
```

```{r}
img <- magick::image_read(result2arrary / 255)

image_write(img, path = "final.png", format = "png")
```

# reference:

https://www.r-bloggers.com/2014/09/r-k-means-clustering-on-an-image/#google_vignette