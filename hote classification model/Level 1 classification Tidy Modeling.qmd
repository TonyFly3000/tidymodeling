---
title: "Level 1 classification Tidy Modeling"
subtitle: "with hotel booking data"
execute:
  warning: false
  error: false
format:
  html:
    toc: true
    toc-location: right
    code-fold: show
    code-tools: true
    number-sections: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---

Level 1 classification Tidy Modeling: using basic Tidymodel package.

# load package

```{r}
#| code-summary: "Load Pacakges & Set Options"
library(themis)
library(tidyverse)      
library(tidymodels)     
library(palmerpenguins) # penguin dataset
library(gt)             # better tables
library(bonsai)         # tree-based models
library(conflicted)     # function conflicts
library(vetiver)
library(Microsoft365R)
library(pins)
tidymodels_prefer()     # handle conflicts
conflict_prefer("penguins", "palmerpenguins")
options(tidymodels.dark = TRUE) # dark mode
theme_set(theme_bw()) # set default ggplot2 theme
```

# data preparation

## read data

```{r}
library(tidyverse)

hotels <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2020/2020-02-11/hotels.csv")


hotel_stays <- hotels %>%
  filter(is_canceled == 0) %>%
  mutate(
    children = case_when(
      children + babies > 0 ~ "children",
      TRUE ~ "none"
    ),
    required_car_parking_spaces = case_when(
      required_car_parking_spaces > 0 ~ "parking",
      TRUE ~ "none"
    )
  ) %>%
  select(-is_canceled, -reservation_status, -babies)


```

## plotting

```{r}
hotel_stays %>%
  mutate(arrival_date_month = factor(arrival_date_month,
    levels = month.name
  )) %>%
  count(hotel, arrival_date_month, children) %>%
  group_by(hotel, children) %>%
  mutate(proportion = n / sum(n)) %>%
  ggplot(aes(arrival_date_month, proportion, fill = children)) +
  geom_col(position = "dodge") +
  scale_y_continuous(labels = scales::percent_format()) +
  facet_wrap(~hotel, nrow = 2) +
  labs(
    x = NULL,
    y = "Proportion of hotel stays",
    fill = NULL
  )
```

## data split

```{r}
#| code-summary: "Prepare & Split Data"
hotels_df <- hotel_stays %>%
  select(
    children, hotel, arrival_date_month, meal, adr, adults,
    required_car_parking_spaces, total_of_special_requests,
    stays_in_week_nights, stays_in_weekend_nights
  ) %>%
  mutate_if(is.character, factor) %>% rename(target_variable=children) %>% sample_n(10000)
```

```{r}

set.seed(1234)

data_split <- initial_validation_split(data=hotels_df, prop = c(0.7,0.2))

data_train=training(data_split)  

data_test=testing(data_split)  

data_valid=validation(data_split)

```

```{r}
dim(data_train)
```

```{r}
dim(data_test)
```

```{r}
dim(data_valid)
```

# modeling

## recipe

did not use recipe at this case

## model

decision tree model

```{r}
tree_spec <- decision_tree() %>%
  set_engine("rpart") %>%
  set_mode("classification")
```

KNN model

```{r}
knn_spec <- nearest_neighbor() %>%
  set_engine("kknn") %>%
  set_mode("classification")
```

## trainning

```{r}
knn_fit <- knn_spec %>%
  fit(target_variable ~ ., data = data_train)

knn_fit
```

```{r}
tree_fit <- tree_spec %>%
  fit(target_variable ~ ., data = data_train)

tree_fit
```

# model result

## Evaluate

Make predictions on the testing data

```{r}
predictions <- predict(tree_fit,data_test) 

predictions_probability <- predict(tree_fit,data_test,type="prob")

```

```{r}
data_test_result=cbind(data_test,predictions,predictions_probability) 
```

```{r}
conf_mat(data_test_result, truth = target_variable,
    estimate = .pred_class)
```

```{r}
metrics(data_test_result, target_variable, .pred_class)
```


```{r}
accuracy(data_test_result, truth = target_variable, estimate = .pred_class)
```

```{r}
sens(data_test_result, truth = target_variable,
    estimate = .pred_class)
```

```{r}
spec(data_test_result, truth = target_variable,
    estimate = .pred_class)
```

```{r}

all_metrics <- metric_set(accuracy, sens, spec)

all_metrics(data_test_result, truth = target_variable,estimate = .pred_class)
```

```{r}
conf_mat(data_test_result, truth = target_variable,estimate = .pred_class) %>% 
  summary()
```

ROC:receiver operating characteristic curve


```{r}
roc_curve(data_test_result, truth = target_variable, .pred_children) %>% 
  autoplot()
```

AUC:Area under ROC Curve
```{r}
roc_auc(data_test_result, truth = target_variable, .pred_children)
```


## save model

check model size

```{r}
library(lobstr)
obj_size(tree_fit)
```

bundle and save model

```{r}
library(bundle)
model_bundle <- bundle(tree_fit)
```

```{r}
saveRDS(model_bundle,'level 1 classification tree hotel model.RDS')
```

## make predication

load model and unbundle

```{r}
model=readRDS('level 1 classification tree hotel model.RDS')

model <- unbundle(model)
```

```{r}
final_prediction=predict(model,data_valid)

head(final_prediction)
```

# reference:
